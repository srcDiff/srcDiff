<!DOCTYPE refentry SYSTEM "option.dtd">

<refentry>
<refentryinfo>
    <date>&DATE;</date>
</refentryinfo>
<refmeta>
  <refentrytitle><application>src2srcml</application></refentrytitle><manvolnum>1</manvolnum><refmiscinfo>src2srcml 1.0</refmiscinfo>
</refmeta>
<refnamediv>
  <refname><application>src2srcml</application></refname><refpurpose>translates source code into the XML source-code representation srcML</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <refsynopsisdivinfo>
    <date>2001-01-01</date>
  </refsynopsisdivinfo>
  <cmdsynopsis>
    <command>src2srcml</command>
<arg><option>-hVnizcgv</option></arg>
<arg><option>&LANGUAGE_FLAG_SHORT;     <replaceable class="parameter">language</replaceable></option></arg>
<arg><option>&DIRECTORY_FLAG_SHORT;    <replaceable class="parameter">directory</replaceable></option></arg>
<arg><option>&FILENAME_FLAG_SHORT;     <replaceable class="parameter">filename</replaceable></option></arg>
<arg><option>&SRCVERSION_FLAG_SHORT;   <replaceable class="parameter">version</replaceable></option></arg>
<arg><option>&ENCODING_FLAG_SHORT;     <replaceable class="parameter">encoding</replaceable></option></arg>
<arg><option>&SRC_ENCODING_FLAG_SHORT; <replaceable class="parameter">encoding</replaceable></option></arg>
<arg rep="repeat"><replaceable class="parameter">input-source-code-file</replaceable></arg>
<arg><option>&OUTPUT_FLAG_SHORT;       <replaceable class="parameter">output-srcML-file</replaceable></option></arg>
  </cmdsynopsis>
</refsynopsisdiv>
<refsect1>
  <refsect1info>
    <date>2006-01-04</date>
  </refsect1info>
  <title>DESCRIPTION</title>
  <para>
    The program <command>src2srcml</command> translates source-code
    files into the XML source-code representation srcML.  The srcML
    format allows the use of XML for addressing, querying, and
    transformation of source code.  All text from the original
    source-code file is preserved including white-space, comments, and
    preprocessor statements.  No preprocessing of the source code is
    done.  In addition, the tool can be applied to individual source-code
    files, or code fragments.
  </para>
  <para>
    The translation is fast and uses a stream-parsing approach with
    top-down parsing and elements issued as soon as they are detected.
  </para>
  <para>
    The program <command>src2srcml</command> is typically used with
    <command>srcml2src</command> which converts from the srcML format
    back to source code.  Conversion of a source-code file through
    <command>src2srcml</command> and then through
    <command>srcml2src</command> produces the original source-code
    file.  The program <command>srcml2src</command> also provides a
    set of utilities for working with srcML files, including
    efficient querying and transformation of source code.
  </para>
  <para>
    Using the character - in the place of an input source-code file
    filename uses standard input, and in place of an output srcML file
    uses standard output.
  </para>
</refsect1>
<refsect1>
  <title>OPTIONS</title>
  <variablelist>
    <varlistentry>
      <term><option>&HELP_FLAG_SHORT;, &HELP_FLAG;</option></term>
      <listitem>
	<para>
	  Output the help and exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERSION_FLAG_SHORT;, &VERSION_FLAG;</option></term>
      <listitem>
	<para>
	  Output the version of src2srcml then exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&EXPRESSION_MODE_FLAG_SHORT;, &EXPRESSION_MODE_FLAG;</option></term>
      <listitem>
	<para>
	  Translates a single, standalone expression.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&COMPOUND_FLAG_SHORT;, &COMPOUND_FLAG;</option></term>
      <listitem>
	<para>
	  Stores all input source files into one compound srcML
	  document.  Default with more then one input file, a directory, or the <option>&FILELIST_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&FILELIST_FLAG;</option></term>
      <listitem>
	<para>
	  Treats the input file as a list of source files.  Each file
	  is separately translated and collectively stored into a
	  single compound srcML document.  The list has a single
	  filename on each line starting at the beginning of the line.
	  Blank lines and lines that begin with the character '#' are ignored.
	  As with input and output files, using the character - in
	  place of a file name takes the input list from standard input.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRC_ENCODING_FLAG_SHORT;, &SRC_ENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
	<para>
	  Sets the input encoding of the source-code file to
	  <replaceable>encoding</replaceable>.  The default is
	  &DEFAULT_TEXT_ENCODING;.  Used for any necessary source-code
	  text translation to the encoding used in the srcML file.
	  Possible encodings can be obtained by using the command
	  <command>iconv -l</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&ENCODING_FLAG_SHORT;, &ENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
	<para>
	  Sets the xml encoding of the output srcML file to
	  <replaceable class="parameter">encoding</replaceable>.  The
	  default is UTF-8.  Possible encodings can be obtained by
	  using the command <command>iconv -l</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_XML_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of the default XML declaration.  Useful when the
	  output is to be placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_NAMESPACE_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of namespace declarations.  Useful when the output
	  is to be placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&COMPRESSED_FLAG_SHORT;, &COMPRESSED_FLAG;</option></term>
      <listitem>
	<para>
	  Output is in compressed gzip format.  This format can be directly,
	  and automatically, read by <command>srcml2src</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&INTERACTIVE_FLAG_SHORT;, &INTERACTIVE_FLAG;</option></term>
      <listitem>
	<para>
	  Default is to use buffered output for speed.  For
	  interactive applications output is issued as soon as parsed.
	</para>
	<para>
	  For input from terminal, interactive is default.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&DEBUG_FLAG_SHORT;, &DEBUG_FLAG;</option></term>
      <listitem>
	<para>
	  When translation errors occur src2srcml preserves all text,
	  but may issue incorrect markup.  In debug mode the text with
	  the translation error is marked with a special set of tags
	  with the prefix &SRCML_ERR_NS_PREFIX_DEFAULT; from the namespace
	  &SRCML_ERR_NS_URI;.  Debug mode can also be indicated by defining
	  a prefix for this namespace URL, e.g., 
	  <option>&XMLNS_FLAG;:&SRCML_ERR_NS_PREFIX_DEFAULT;="&SRCML_ERR_NS_URI;"</option>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERBOSE_FLAG_SHORT;, &VERBOSE_FLAG;</option></term>
      <listitem>
	<para>
	  Conversion and status information to stderr, including
	  encodings used.  Especially useful with for monitoring
	  progress of the the <option>&FILELIST_FLAG;</option> option.
	  The signal SIGUSR1 can be used to toggle this option.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>Metadata Options</title>
  <para>
    This set of options allows control over various metadata stored in the srcML document.
  </para>
    <varlistentry>
      <term><option>&LANGUAGE_FLAG_SHORT;, &LANGUAGE_FLAG;=<replaceable class="parameter">language</replaceable></option></term>
      <listitem>
	<para>
	  The programming language of the source-code file.  Allowable
	  values are C, C++, Java, or AspectJ.  The language affects
	  parsing, the allowed markup, and what is considered a
	  keyword.  The value is also stored as an attribute of the
	  root element unit.
	</para>
	<para>
	  If not specified, the programming language is based on the
	  file extension.  If the file extension is not available or
	  not in the standard list, the default is C++.
	</para>
      </listitem>
    </varlistentry>

    <para>
	  The rest of the metadata options are for optional
	  attributes.  For compound srcML documents this option sets
	  the attribute on the root element.
    </para>

    <varlistentry>
      <term><option>&DIRECTORY_FLAG_SHORT;, &DIRECTORY_FLAG;=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
	<para>
	  The value of the directory attribute is typically obtained
	  from the path of the input filename.  This option allows you
	  to specify a different directory for standard input or where
	  the directory is not contained in the input path.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&FILENAME_FLAG_SHORT;, &FILENAME_FLAG;=<replaceable class="parameter">filename</replaceable></option></term>
      <listitem>
	<para>
	  The value of the filename attribute is typically obtained
	  from the input filename.  This option allows you to specify
	  a different filename for standard input or where the filename
	  is not contained in the input path.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRCVERSION_FLAG_SHORT;, &SRCVERSION_FLAG;=<replaceable class="parameter">version</replaceable></option></term>
      <listitem>
	<para>
	  Sets the value of the attribute version to
	  <replaceable>version</replaceable>.  This is a
	  purely-descriptive attribute, where the value has no
	  interpretation by src2srcml.
	</para>
      </listitem>
    </varlistentry>
</refsect1>
<refsect1>
  <title>Markup Extensions</title>
  <para>
    Each extensions to the srcML markup has its own namespace.  These
    are indicated in the srcML document by the declaration of the
    specific extension namespace.  These flags make it easier to declare.
  </para>
    <varlistentry>
      <term><option>&LITERAL_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of literal values using the element
	  literal with the prefix
	  "&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_LITERAL_NS_URI;".
	</para>

	<para>
	  Can also be specified by declaring a prefix for literal
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;="&SRCML_EXT_LITERAL_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&OPERATOR_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of operators values using the element
	  operator with the prefix
	  "&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_OPERATOR_NS_URI;".
	</para>
	<para>
	  Can also be specified by declaring a prefix for operator
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;="&SRCML_EXT_OPERATOR_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&MODIFIER_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of type modifiers using the element
	  modifier with the prefix
	  "&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_MODIFIER_NS_URI;".
	</para>
	<para>
	  Can also be specified by declaring a prefix for the modifier
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;="&SRCML_EXT_MODIFIER_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>

</refsect1>
<refsect1>
  <title>LINE/COLUMN POSITION</title>
  <para>
    Optional line and column attributes are used to indicate
    the position of an element in the original source code document.
    Both the line and column start at 1.  The column position is based
    on the tab settings with a default tab size of 8.  Other tab sizes
    can be set using the &TABS_FLAG;.

  </para>
  <variablelist>
    <varlistentry>
      <term><option>&POSITION_FLAG;</option></term>
      <listitem>
	<para>
	  Insert line and column attributes into each start element.
	  These attributes have a default prefix of
	  "&SRCML_EXT_POSITION_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_POSITION_NS_URI;".
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&TABS_FLAG;</option></term>
      <listitem>
	<para>
	  Set the tab size.  Default is 8.  Use of this option
	  automatically turns on the position attributes.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>URI AND PREFIX</title>
  <para>
    There is a set of standard URIs for the elements in srcML, each
    with a predefined prefix.  The predefined URIs and prefixes for
    them include (given in xmlns notation):
  </para>

  <informaltable frame='none' align="center" width="5in">
    <tgroup cols='2'>
      <colspec colwidth='0.5in'/>
      <colspec colwidth='4.0in'/>
      <tbody>
	<row><entry>PREFIX</entry><entry>URI</entry></row>
    <row><entry></entry><entry>&SRCML_SRC_NS_URI;</entry></row>
    <row><entry>&SRCML_CPP_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_CPP_NS_URI;</entry></row>
    <row><entry>&SRCML_ERR_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_ERR_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_LITERAL_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_OPERATOR_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_MODIFIER_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_POSITION_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_POSITION_NS_URI;</entry></row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>
    The following options can be used to change the prefixes.
  </para>

  <variablelist>
    <varlistentry>
      <term><option>&XMLNS_FLAG;=<replaceable class="parameter">URI</replaceable></option></term>
      <listitem>
	<para>
	  Sets the URI for the default namespace.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&XMLNS_FLAG;:<replaceable class="parameter">PREFIX</replaceable>=<replaceable class="parameter">URI</replaceable></option></term>
      <listitem>
	<para>
	  Sets the namespace prefix PREFIX for the namespace URI.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    These options are an alternative way to turn on options by
    declaring the URI for an option.  See the MARKUP EXTENSIONS for
    examples.
  </para>

</refsect1>
<refsect1>
  <title>CPP MARKUP OPTIONS</title>
  <para>
    This set of options allows control over how preprocessing regions are handled,
    i.e., whether parsing and markup occur.  In all cases the text is preserved.
  </para>
  <variablelist>
    <varlistentry>
      <term><option>&CPP_MARKUP_ELSE_FLAG;</option></term>
      <listitem>
	<para>
	  Place markup in #else and #elif regions.  Default.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_TEXTONLY_ELSE_FLAG;</option></term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_MARKUP_IF0_FLAG;</option></term>
      <listitem>
	<para>
	  Place markup in #if 0 regions.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_TEXTONLY_IF0_FLAG;</option></term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	  Default.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>SIGNAL PROCESSING</title>

  <para>
    The following signals may be used to control src2srcml:
  </para>
  <variablelist>
    <varlistentry>
      <term>SIGUSR1</term>
      <listitem>
	<para>
	  Toggles verbose option.  Useful with multiple input files as in the <option>&FILELIST_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>SIGINT</term>
      <listitem>
	<para>
	  Completes current file translation (and output) with multiple input files.
	  The input file currently being translated is allowed to complete, the complex document is
	  closed, and then the program stops.  More than one SIGINT causes default behavior.
	</para>
	<para>
	  This special SIGINT handling only occurs with multiple input files in compound srcML documents.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

</refsect1>
<refsect1>
  <title>USAGE</title>
  <para>
    To translate the C++ source-code file main.cpp into the srcML file
    main.cpp.xml:
  </para>
  <para>
    <command>src2srcml</command> main.cpp &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
  <para>
    To translate a C source-code file main.c into the srcML file main.c.xml:
  </para>
  <para>
    <command>src2srcml</command> &LANGUAGE_FLAG;=C main.c &OUTPUT_FLAG_SHORT; main.c.xml
  </para>
  <para>
    To translate a Java source-code file main.java into the srcML file main.java.xml:
  </para>
  <para>
    <command>src2srcml</command> &LANGUAGE_FLAG;=Java main.java &OUTPUT_FLAG_SHORT; main.java.xml
  </para>
  <para>
    To specify the directory, filename, and version for an input file from standard input:
  </para>
  <para>
    <command>src2srcml</command> &DIRECTORY_FLAG;=src &FILENAME_FLAG;=main.cpp &VERSION_FLAG;=1 - &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
  <para>
    To translate a source-code file in ISO-8859-1 encoding into a srcML file with UTF-8 encoding:
  </para>
  <para>
    <command>src2srcml</command> &SRC_ENCODING_FLAG;=ISO-8859-1 &ENCODING_FLAG;=UTF-8 main.cpp &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
</refsect1>
<refsect1>
  <title>RETURN STATUS</title>

  <para>&STATUS_SUCCESS;: Normal</para>
  <para>&STATUS_ERROR;: Error </para>
  <para>&STATUS_INPUTFILE_PROBLEM;: Problem with input file</para>
  <para>&STATUS_UNKNOWN_OPTION;: Unknown option</para>
  <para>&STATUS_UNKNOWN_ENCODING;: Unknown encoding</para>
  <para>&STATUS_INVALID_LANGUAGE;: Invalid language</para>
  <para>&STATUS_LANGUAGE_MISSING;: Language option specified, but value missing</para>
  <para>&STATUS_FILENAME_MISSING;: Filename option specified, but value missing</para>
  <para>&STATUS_DIRECTORY_MISSING;: Directory option specified, but value missing</para>
  <para>&STATUS_VERSION_MISSING;: Version option specified, but value missing</para>
  <para>&STATUS_SRCENCODING_MISSING;: Text encoding option specified, but value missing</para>
  <para>&STATUS_XMLENCODING_MISSING;: XML encoding option specified, but value missing</para>
  <para>&STATUS_INVALID_OPTION_COMBINATION;: Invalid combination of options</para>
  <para>&STATUS_TERMINATED;: Incomplete output due to termination</para>

</refsect1>
<refsect1>
  <title>CAVEATS</title>
  <para>
    Translation is performed based on local information with no symbol
    table.  For non-CFG languages, i.e., C/C++, and with macros this
    may lead to incorrect markup.
  </para>
  <para>
    Line endings are normalized in XML formats including srcML.
  </para>
</refsect1>
<refsect1>
  <title>BUGS</title>
  <para>
    Java language mode does not contain all of Java 1.5 language elements.
  </para>
  <para>
    Libxml2 directly supports many encodings beyond UTF-8, UTF-16, and ISO-8859-1 through iconv.
    However, the BOM (Byte Order Mark) immediately before the XML declaration may not be processed
    correctly by <command>srcml2src</command> and by other libxml2-based tools (e.g., xmllint).
    Use the LE or BE version of the encoding, e.g., UTF-32BE, UTF-32LE, instead.
  </para>
</refsect1>
<refsect1>
  <title>SEE ALSO</title>
  <para>
    <command>srcml2src</command>(1)
  </para>
</refsect1>
<refsect1>
  <title>AUTHOR</title>
  <para>Written by 
    <author>
      <firstname>Michael</firstname>
      <othername role="mi">L.</othername>
      <surname>Collard</surname>
      <contrib>Original author</contrib>
    </author> 
    and
    <author>
      <firstname>Huzefa</firstname>
      <surname>Kagdi</surname>
      <contrib>Original author</contrib>
    </author>
  </para>
</refsect1>
</refentry>
