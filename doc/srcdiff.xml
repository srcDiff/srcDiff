<!DOCTYPE refentry SYSTEM "option.dtd">

<refentry>
<refentryinfo>
    <date>&DATE;</date>
</refentryinfo>
<refmeta>
  <refentrytitle><application>srcdiff</application></refentrytitle><manvolnum>1</manvolnum><refmiscinfo>srcdiff 1.0</refmiscinfo>
</refmeta>
<refnamediv>
  <refname><application>srcdiff</application></refname><refpurpose>computes the XML source-code difference representation srcDiff</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <refsynopsisdivinfo>
    <date>2012-05-09</date>
  </refsynopsisdivinfo>
  <cmdsynopsis>
    <command>srcdiff</command>
<arg><option>-hVnzgv</option></arg>
<arg><option>&LANGUAGE_FLAG_SHORT;     <replaceable class="parameter">language</replaceable></option></arg>
<arg><option>&DIRECTORY_FLAG_SHORT;    <replaceable class="parameter">directory</replaceable></option></arg>
<arg><option>&FILENAME_FLAG_SHORT;     <replaceable class="parameter">filename</replaceable></option></arg>
<arg><option>&SRCVERSION_FLAG_SHORT;   <replaceable class="parameter">version</replaceable></option></arg>
<arg><option>&ENCODING_FLAG_SHORT;     <replaceable class="parameter">encoding</replaceable></option></arg>
<arg><option>&SRC_ENCODING_FLAG_SHORT; <replaceable class="parameter">encoding</replaceable></option></arg>
<arg rep="repeat"><replaceable class="parameter">old_src_infile new_src_infile</replaceable></arg>
<arg><option>&OUTPUT_FLAG_SHORT;       <replaceable class="parameter">srcDiff_outfile</replaceable></option></arg>
  </cmdsynopsis>
</refsynopsisdiv>
<refsect1>
  <refsect1info>
    <date>2012-05-09</date>
  </refsect1info>
  <title>DESCRIPTION</title>
  <para>
    The program <command>srcdiff</command> translates source-code
    files into the XML source-code representation srcML and then computes
    a difference of the the two srcML documents, producing an XML-based 
    srcDiff file The srcDiff format is an extension to the srcML format
    and allows the use of XML for addressing, querying, and transformation
    of source code.  All text from the original source-code file is preserved
    including white-space, comments, and preprocessor statements.
    No preprocessing of the source code is done.  In addition, the tool 
    can be applied to individual pairs of source-code files, or code fragments.

    <command>srcdiff</command> also provides some support for visualization,
    highlighting source code differences.
  </para>
  <para>
    The program <command>srcdiff</command> is typically used with
    <command>srcml2src</command> which converts from the srcDiff format
    back to source code or the individual srcML files.  Conversion of 
    a pair ofsource-code files through <command>srcdiff</command> and then
    through <command>srcml2src</command> can produce both the original
    source-code files.  The program <command>srcml2src</command> also
    provides a set of utilities for working with srcDiff and srcML files,
    including efficient querying and transformation of each and/or both of 
    the versions of source code.
  </para>
</refsect1>
<refsect1>
  <title>OPTIONS</title>
  <variablelist>
    <varlistentry>
      <term><option>&HELP_FLAG_SHORT;, &HELP_FLAG;</option></term>
      <listitem>
	<para>
	  Output the help and exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERSION_FLAG_SHORT;, &VERSION_FLAG;</option></term>
      <listitem>
	<para>
	  Output the version of srcdiff then exit.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&EXPRESSION_MODE_FLAG_SHORT;, &EXPRESSION_MODE_FLAG;</option></term>
      <listitem>
	<para>
	  Translates a single, standalone expression.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&COMPOUND_FLAG_SHORT;, &COMPOUND_FLAG;</option></term>
      <listitem>
	<para>
	  Stores all input source files into one compound srcDiff
	  document.  Default with more then one input file pairs, a directory, or the <option>&FILELIST_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&FILELIST_FLAG;</option></term>
      <listitem>
	<para>
	  Treats the input file as a list of source file pairs separated 
          with the character |.  Each file is separately translated and
          collectively stored into a single compound srcDiff document.
          The list has the separated filenames on each line starting at the 
          beginning of the line. Blank lines and lines that 
          begin with the character '#' are ignored. Using the character - in
          place of a file name takes the input list from standard input.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRC_ENCODING_FLAG_SHORT;, &SRC_ENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
	<para>
	  Sets the input encoding of the source-code file to
	  <replaceable>encoding</replaceable>.  The default is
	  &DEFAULT_TEXT_ENCODING;.  Used for any necessary source-code
	  text translation to the encoding used in the srcDiff file.
	  Possible encodings can be obtained by using the command
	  <command>iconv -l</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&ENCODING_FLAG_SHORT;, &ENCODING_FLAG;=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
	<para>
	  Sets the xml encoding of the output srcDiff file to
	  <replaceable class="parameter">encoding</replaceable>.  The
	  default is UTF-8.  Possible encodings can be obtained by
	  using the command <command>iconv -l</command>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_XML_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of the default XML declaration.  Useful when the
	  output is to be placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_NAMESPACE_DECLARATION_FLAG;</option></term>
      <listitem>
	<para>
	  No output of namespace declarations.  Useful when the output
	  is to be placed inside another XML document.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&DEBUG_FLAG_SHORT;, &DEBUG_FLAG;</option></term>
      <listitem>
	<para>
	  When translation errors occur srcdiff preserves all text,
	  but may issue incorrect markup.  In debug mode the text with
	  the translation error is marked with a special set of tags
	  with the prefix &SRCML_ERR_NS_PREFIX_DEFAULT; from the namespace
	  &SRCML_ERR_NS_URI;.  Debug mode can also be indicated by defining
	  a prefix for this namespace URL, e.g., 
	  <option>&XMLNS_FLAG;:&SRCML_ERR_NS_PREFIX_DEFAULT;="&SRCML_ERR_NS_URI;"</option>.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&VERBOSE_FLAG_SHORT;, &VERBOSE_FLAG;</option></term>
      <listitem>
	<para>
	  Conversion and status information to stderr, including
	  encodings used.  Especially useful with for monitoring
	  progress of the the <option>&FILELIST_FLAG;</option> option.
	  The signal SIGUSR1 can be used to toggle this option.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>Metadata Options</title>
  <para>
    This set of options allows control over various metadata stored in the srcDiff document.
  </para>
    <varlistentry>
      <term><option>&LANGUAGE_FLAG_SHORT;, &LANGUAGE_FLAG;=<replaceable class="parameter">language</replaceable></option></term>
      <listitem>
	<para>
	  The programming language of the source-code file.  Allowable
	  values are C, C++, Java, or AspectJ.  The language affects
	  parsing, the allowed markup, and what is considered a
	  keyword.  The value is also stored as an attribute of the
	  root element unit.
	</para>
	<para>
	  If not specified, the programming language is based on the
	  file extension.  If the file extension is not available or
	  not in the standard list, the default is C++.
	</para>
      </listitem>
    </varlistentry>

    <para>
	  The rest of the metadata options are for optional
	  attributes.  For compound srcML documents this option sets
	  the attribute on the root element.
    </para>

    <varlistentry>
      <term><option>&DIRECTORY_FLAG_SHORT;, &DIRECTORY_FLAG;=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
	<para>
	  The value of the directory attribute is typically obtained
	  from the path of the input filename.  This option allows you
	  to specify a different directory for standard input or where
	  the directory is not contained in the input path.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&FILENAME_FLAG_SHORT;, &FILENAME_FLAG;=<replaceable class="parameter">filename</replaceable></option></term>
      <listitem>
	<para>
	  The value of the filename attribute is typically obtained
	  from the input filename.  This option allows you to specify
	  a different filename for standard input or where the filename
	  is not contained in the input path.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRCVERSION_FLAG_SHORT;, &SRCVERSION_FLAG;=<replaceable class="parameter">version</replaceable></option></term>
      <listitem>
	<para>
	  Sets the value of the attribute version to
	  <replaceable>version</replaceable>.  This is a
	  purely-descriptive attribute, where the value has no
	  interpretation by srcdiff.
	</para>
      </listitem>
    </varlistentry>
</refsect1>
<refsect1>
  <title>Markup Extensions</title>
  <para>
    Each extensions to the srcML markup has its own namespace.  These
    are indicated in the srcML document by the declaration of the
    specific extension namespace.  These flags make it easier to declare.
  </para>
    <varlistentry>
      <term><option>&LITERAL_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of literal values using the element
	  literal with the prefix
	  "&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_LITERAL_NS_URI;".
	</para>

	<para>
	  Can also be specified by declaring a prefix for literal
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;="&SRCML_EXT_LITERAL_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&OPERATOR_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of operators values using the element
	  operator with the prefix
	  "&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_OPERATOR_NS_URI;".
	</para>
	<para>
	  Can also be specified by declaring a prefix for operator
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;="&SRCML_EXT_OPERATOR_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&MODIFIER_FLAG;</option></term>
      <listitem>
	<para>
	  Additional markup of type modifiers using the element
	  modifier with the prefix
	  "&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;" in the namespace
	  "&SRCML_EXT_MODIFIER_NS_URI;".
	</para>
	<para>
	  Can also be specified by declaring a prefix for the modifier
	  namespace using the <option>&XMLNS_FLAG;</option> option,
	  e.g.,
	  <option>&XMLNS_FLAG;:&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;="&SRCML_EXT_MODIFIER_NS_URI;"</option>
	</para>
      </listitem>
    </varlistentry>

</refsect1>
<refsect1>
  <title>URI AND PREFIX</title>
  <para>
    There is a set of standard URIs for the elements in srcML, each
    with a predefined prefix.  The predefined URIs and prefixes for
    them include (given in xmlns notation):
  </para>

  <informaltable frame='none' align="center" width="5in">
    <tgroup cols='2'>
      <colspec colwidth='0.5in'/>
      <colspec colwidth='4.0in'/>
      <tbody>
	<row><entry>PREFIX</entry><entry>URI</entry></row>
    <row><entry></entry><entry>&SRCML_SRC_NS_URI;</entry></row>
    <row><entry>&SRCML_CPP_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_CPP_NS_URI;</entry></row>
    <row><entry>&SRCML_ERR_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_ERR_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_LITERAL_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_LITERAL_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_OPERATOR_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_OPERATOR_NS_URI;</entry></row>
    <row><entry>&SRCML_EXT_MODIFIER_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_EXT_MODIFIER_NS_URI;</entry></row>
    <row><entry>&SRCML_DIFF_NS_PREFIX_DEFAULT;</entry><entry>&SRCML_DIFF_NS_URI;</entry></row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>
    The following options can be used to change the prefixes.
  </para>

  <variablelist>
    <varlistentry>
      <term><option>&XMLNS_FLAG;=<replaceable class="parameter">URI</replaceable></option></term>
      <listitem>
	<para>
	  Sets the URI for the default namespace.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&XMLNS_FLAG;:<replaceable class="parameter">PREFIX</replaceable>=<replaceable class="parameter">URI</replaceable></option></term>
      <listitem>
	<para>
	  Sets the namespace prefix PREFIX for the namespace URI.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    These options are an alternative way to turn on options by
    declaring the URI for an option.  See the MARKUP EXTENSIONS for
    examples.
  </para>

</refsect1>
<refsect1>
  <title>CPP MARKUP OPTIONS</title>
  <para>
    This set of options allows control over how preprocessing regions are handled,
    i.e., whether parsing and markup occur.  In all cases the text is preserved.
  </para>
  <variablelist>
    <varlistentry>
      <term><option>&CPP_MARKUP_ELSE_FLAG;</option></term>
      <listitem>
	<para>
	  Place markup in #else and #elif regions.  Default.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_TEXTONLY_ELSE_FLAG;</option></term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_MARKUP_IF0_FLAG;</option></term>
      <listitem>
	<para>
	  Place markup in #if 0 regions.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CPP_TEXTONLY_IF0_FLAG;</option></term>
      <listitem>
	<para>
	  Only place text in #else and #elif regions leaving out markup.
	  Default.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>SRCDIFF METHODS</title>
  <para>
    This set of options selects the granularity and markup methods of srcDiff.
  </para>
  <variablelist>
    <varlistentry>
      <term><option>&METHOD_FLAG;</option></term>
      <listitem>
	<para>
	  Set the granularity and markup.  Provide a list of comma 
          separated settings.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <informaltable frame="none" align="center" width="5in">
    <tgroup cols="2">
      <colspec colwidth="0.5in" />
      <colspec colwidth="4.0in" />
      <tbody>
        <row><entry>collect</entry><entry>collect statements/substatements
            with coarser granulatrity.</entry></row>
        <row><entry>raw</entry><entry>Markup with fine granularity.
        </entry></row>
      </tbody>
    </tgroup>
  </informaltable>
</refsect1>
<refsect1>
  <title>SRCDIFF VISUALIZATION</title>
  <para>
    This set of options enables and controls visualization.
  </para>
  <variablelist>
    <varlistentry>
      <term><option>&VISUALIZE_FLAG;</option></term>
      <listitem>
	<para>
	  Sets output as visualization output.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SAME_FLAG;</option></term>
      <listitem>
	<para>
	  Output files with no change.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_SAME_FLAG;</option></term>
      <listitem>
	<para>
	  Do not output files with no change.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&PURE_FLAG;</option></term>
      <listitem>
	<para>
	  Output files than were completely added or deleted.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&NO_PURE_FLAG;</option></term>
      <listitem>
	<para>
	  Do not output files that were completely added or deleted.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&CHANGE_FLAG;</option></term>
      <listitem>
	<para>
	  Output lines of files that contain either a srcDiff and/or diff
          change.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&SRCDIFFONLY_FLAG;</option></term>
      <listitem>
	<para>
	  Output lines that contain only a srcDiff change.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><option>&DIFFONLY_FLAG;</option></term>
      <listitem>
	<para>
	  Output lines that contain only a diff change.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>
<refsect1>
  <title>SIGNAL PROCESSING</title>

  <para>
    The following signals may be used to control srcdiff:
  </para>
  <variablelist>
    <varlistentry>
      <term>SIGUSR1</term>
      <listitem>
	<para>
	  Toggles verbose option.  Useful with multiple input files as in the <option>&FILELIST_FLAG;</option> option.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>SIGINT</term>
      <listitem>
	<para>
	  Completes current file translation (and output) with multiple input files.
	  The input file currently being translated is allowed to complete, the complex document is
	  closed, and then the program stops.  More than one SIGINT causes default behavior.
	</para>
	<para>
	  This special SIGINT handling only occurs with multiple input files in compound srcDiff documents.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

</refsect1>
<refsect1>
  <title>USAGE</title>
  <para>
    To translate the C++ source-code files main.cpp main2.cpp into the srcDiff
    file main.cpp.xml:
  </para>
  <para>
    <command>srcdiff</command> main.cpp main2.cpp 
    &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
  <para>
    To translate the C source-code files main.c and main2.c into the srcDiff
    file main.c.xml:
  </para>
  <para>
    <command>srcdiff</command> &LANGUAGE_FLAG;=C main.c main2.c
    &OUTPUT_FLAG_SHORT; main.c.xml
  </para>
  <para>
    To translate the Java source-code files main.java main2.java into the
    srcDiff file main.java.xml:
  </para>
  <para>
    <command>srcdiff</command> &LANGUAGE_FLAG;=Java main.java main2.cpp 
    &OUTPUT_FLAG_SHORT; main.java.xml
  </para>
  <para>
    To specify the directory, filename, and version.:
  </para>
  <para>
    <command>srcdiff</command> &DIRECTORY_FLAG;=src &FILENAME_FLAG;=main.cpp &VERSION_FLAG;=1 a.cpp b.cpp &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
  <para>
    To translate a pair of source-code files in ISO-8859-1 encoding
    into a srcDiff file with UTF-8 encoding:
  </para>
  <para>
    <command>srcdiff</command> &SRC_ENCODING_FLAG;=ISO-8859-1 &ENCODING_FLAG;=UTF-8 main.cpp main2.cpp &OUTPUT_FLAG_SHORT; main.cpp.xml
  </para>
</refsect1>
<refsect1>
  <title>RETURN STATUS</title>

  <para>&STATUS_SUCCESS;: Normal</para>
  <para>&STATUS_ERROR;: Error </para>
  <para>&STATUS_INPUTFILE_PROBLEM;: Problem with input file</para>
  <para>&STATUS_UNKNOWN_OPTION;: Unknown option</para>
  <para>&STATUS_UNKNOWN_ENCODING;: Unknown encoding</para>
  <para>&STATUS_INVALID_LANGUAGE;: Invalid language</para>
  <para>&STATUS_LANGUAGE_MISSING;: Language option specified, but value missing</para>
  <para>&STATUS_FILENAME_MISSING;: Filename option specified, but value missing</para>
  <para>&STATUS_DIRECTORY_MISSING;: Directory option specified, but value missing</para>
  <para>&STATUS_VERSION_MISSING;: Version option specified, but value missing</para>
  <para>&STATUS_SRCENCODING_MISSING;: Text encoding option specified, but value missing</para>
  <para>&STATUS_XMLENCODING_MISSING;: XML encoding option specified, but value missing</para>
  <para>&STATUS_INVALID_OPTION_COMBINATION;: Invalid combination of options</para>
  <para>&STATUS_TERMINATED;: Incomplete output due to termination</para>

</refsect1>
<refsect1>
  <title>CAVEATS</title>
  <para>
    Translation is performed based on local information with no symbol
    table.  For non-CFG languages, i.e., C/C++, and with macros this
    may lead to incorrect markup.
  </para>
  <para>
    Line endings are normalized in XML formats including srcML.
  </para>
</refsect1>
<refsect1>
  <title>BUGS</title>
  <para>
    Java language mode does not contain all of Java 1.5 language elements.
  </para>
  <para>
    Libxml2 directly supports many encodings beyond UTF-8, UTF-16, and ISO-8859-1 through iconv.
    However, the BOM (Byte Order Mark) immediately before the XML declaration may not be processed
    correctly by <command>srcml2src</command> and by other libxml2-based tools (e.g., xmllint).
    Use the LE or BE version of the encoding, e.g., UTF-32BE, UTF-32LE, instead.
  </para>
</refsect1>
<refsect1>
  <title>SEE ALSO</title>
  <para>
    <command>src2srcml</command>(1), <command>srcml2src</command>(1)
  </para>
</refsect1>
<refsect1>
  <title>AUTHOR</title>
  <para>Written by 
    <author>
      <firstname>Michael</firstname>
      <othername role="mi">L.</othername>
      <surname>Collard</surname>
      <contrib>Original author</contrib>
    </author> 
    and
    <author>
      <firstname>Michael J.</firstname>
      <surname>Decker</surname>
      <contrib>Original author</contrib>
    </author>
  </para>
</refsect1>
</refentry>
