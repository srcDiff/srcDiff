<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="examplenew.c"><function><type><name>void</name></type> <name>f1</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call> + <call><name>d</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name>void</name></type> <name>g</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list> <block>{}</block></function>

<function><type><name>void</name></type> <name>h1</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>f2</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call> + <call><name>d</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>e</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name>void</name></type> <name>h2</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>d</name><argument_list>()</argument_list></call> + <call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name>e</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>h3</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>d</name><argument_list>()</argument_list></call> + <call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>()</argument_list></call> + <call><name>c</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name>e</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>h4</name><parameter_list>()</parameter_list> <block>{

  <expr_stmt><expr><call><name>d</name><argument_list>()</argument_list></call> + <call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><call><name>f</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name>c</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name>e</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>(<expr><name>a</name> &lt; <name>b</name></expr>)</condition><then>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></then></if>

  <if>if<condition>(<expr><name>a</name> &gt; <name>b</name></expr>)</condition><then>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></then></if>
}</block></function>
</unit>
