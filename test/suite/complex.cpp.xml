<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:diff="http://www.sdml.info/srcDiff" language="C++" dir="complex">

<unit filename="complex|complex">
<diff:delete><if>if <condition>(<expr><call><name><name>shape</name><operator>-&gt;</operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <diff:common><decl_stmt><decl><type><name>QString</name></type> <name>anchorType</name><diff:delete> <init>= <expr><call><name><name>shape</name><operator>-&gt;</operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr></init></diff:delete></decl>;</decl_stmt>
</diff:common><diff:insert><if>if <condition>(<expr><call><name><name>shape</name><operator>-&gt;</operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <operator>=</operator> <call><name><name>shape</name><operator>-&gt;</operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
<elseif>else <if>if <condition>(<expr><call><name><name>element</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><operator>::</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <operator>=</operator> <call><name><name>element</name><operator>.</operator><name>attributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><operator>::</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"anchor-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
<else>else
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <operator>=</operator> <literal type="string">"as-char"</literal></expr>;</expr_stmt></block></else></if> <comment type="line">// default value</comment>

</diff:insert>    <diff:common><comment type="line">// page anchored shapes are handled differently</comment>
<diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>anchorType</name> <operator>!=</operator> <literal type="string">"page"</literal></expr>)</condition><then> <block>{
    <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoTextAnchor</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><operator>new</operator> <call><name>KoTextAnchor</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>anchor</name><operator>-&gt;</operator><name>loadOdfFromShape</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>textSharedData</name><operator>-&gt;</operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoTextDocumentLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="template">&lt;<argument><expr><name>KoTextDocumentLayout</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>block</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>document</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>documentLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>layout</name></expr>)</condition><then> <block>{
        <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoInlineTextObjectManager</name> <modifier>*</modifier></type><name>textObjectManager</name> <init>= <expr><call><name><name>layout</name><operator>-&gt;</operator><name>inlineTextObjectManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>textObjectManager</name></expr>)</condition><then> <block>{
            <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>textObjectManager</name><operator>-&gt;</operator><name>insertInlineObject</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <diff:delete type="whitespace">    </diff:delete>}</block></then></if>
    <diff:delete type="whitespace">    </diff:delete>}</block></then></if>
<diff:delete type="whitespace">    </diff:delete>}</block></then><diff:delete type="whitespace">
   </diff:delete> <else>else <block>{
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>textSharedData</name><operator>-&gt;</operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete type="whitespace">    </diff:delete>}</block></else></if>
</diff:common>}</block></then></if>
</diff:delete></unit>

<unit filename="complex|complex">
<function><type><name>bool</name></type> <name><name>AbstractRegionCommand</name><operator>::</operator><name>isApproved</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>QList</name><argument_list type="template">&lt;<argument><expr><name>Element</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>elements</name> <init>= <expr><call><name>cells</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>begin</name> <init>= <expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><call><name><name>elements</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>elements</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt><diff:insert>
    <if>if <condition>(<expr><name>m_checkLock</name> <operator>&amp;&amp;</operator> <call><name><name>m_sheet</name><operator>-&gt;</operator><name>cellStorage</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hasLockedCells</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing is not possible, because some "</literal>
                                    <literal type="string">"cells are locked as elements of a matrix."</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if></diff:insert>
<diff:insert>    <if>if <condition>(<expr><call><name><name>m_sheet</name><operator>-&gt;</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <diff:common>    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>begin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><operator>--</operator><name>i</name></expr> </then><else>: <expr><operator>++</operator><name>i</name></expr></else></ternary></expr></incr>)</control> <block>{
        <diff:insert type="whitespace">    </diff:insert><decl_stmt><decl><type><specifier>const</specifier> <name>QRect</name></type> <name>range</name> <init>= <expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <diff:insert type="whitespace">    </diff:insert><for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <call><name><name>range</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{
            <diff:insert type="whitespace">    </diff:insert><for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <call><name><name>range</name><operator>.</operator><name>bottom</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{
                <diff:insert type="whitespace">    </diff:insert><function_decl><type><name>Cell</name></type> <name>cell</name><parameter_list>(<param><decl><type><name>m_sheet</name></type></decl></param>, <param><decl><type><name>col</name></type></decl></param>, <param><decl><type><name>row</name></type></decl></param>)</parameter_list>;</function_decl>
                <diff:insert type="whitespace">    </diff:insert><if>if <condition>(<expr><diff:delete><call><name><name>m_sheet</name><operator>-&gt;</operator><name>isProtected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> </diff:delete><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>style</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notProtected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <diff:insert type="whitespace">    </diff:insert><expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing is not possible, "</literal>
                                                <diff:insert type="whitespace">    </diff:insert><literal type="string">"because some cells are protected."</literal></expr></argument>)</argument_list></call></expr></argument>,
                                           <diff:insert type="whitespace">    </diff:insert><argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <diff:insert type="whitespace">    </diff:insert><return>return <expr><literal type="boolean">false</literal></expr>;</return>
                <diff:insert type="whitespace">    </diff:insert>}</block></then></if>
<diff:delete>
                <comment type="line">// check for matrix locks</comment>
                <if>if <condition>(<expr><name>m_checkLock</name> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing is not possible, because some "</literal>
                                                <literal type="string">"cells are locked as elements of a matrix."</literal></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></then></if>
</diff:delete><diff:insert type="whitespace">    </diff:insert>            }</block></for>
        <diff:insert type="whitespace">    </diff:insert>}</block></for>
    <diff:insert type="whitespace">    </diff:insert>}</block></for>
</diff:common>    }</block></then></if>
</diff:insert>    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
</unit>

<unit filename="complex|complex">
<diff:delete><if>if <condition>(<expr><call><name><name>shape</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <diff:common><decl_stmt><decl><type><name>string</name></type> <name>type</name><diff:delete> <init>= <expr><call><name><name>shape</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr></init></diff:delete></decl>;</decl_stmt>
</diff:common>    <diff:common><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <literal type="string">"page"</literal></expr>)</condition><then> <block>{
    <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>Anchor</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><operator>new</operator> <diff:delete type="whitespace">   
    </diff:delete><diff:insert type="whitespace">
</diff:insert>        <call><name>Anchor</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>anchor</name><operator>.</operator><name>loadFromShape</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete type="whitespace">    </diff:delete>}</block></then></if>
</diff:common>}</block></then></if>
</diff:delete>
</unit>

</unit>
