<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:diff="http://www.srcML.org/srcDiff" language="C++" url="complex">

<unit language="C++" filename="complex|complex">
<diff:delete><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>shape</name><operator>-&gt;</operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
    </diff:ws><diff:common><decl_stmt><decl><type><name>QString</name></type> <name>anchorType</name><diff:delete><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>shape</name><operator>-&gt;</operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr></init></diff:delete></decl>;</decl_stmt>
</diff:common><diff:insert><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>shape</name><operator>-&gt;</operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><diff:ws>
    </diff:ws><expr_stmt><expr><name>anchorType</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>shape</name><operator>-&gt;</operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><literal type="string">"text:anchor-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if><diff:ws>
</diff:ws><if type="elseif">else<diff:ws> </diff:ws>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>element</name><operator>.</operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><operator>::</operator><name>text</name></name></expr></argument>,<diff:ws> </diff:ws><argument><expr><literal type="string">"anchor-type"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><diff:ws>
    </diff:ws><expr_stmt><expr><name>anchorType</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>element</name><operator>.</operator><name>attributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><operator>::</operator><name>text</name></name></expr></argument>,<diff:ws> </diff:ws><argument><expr><literal type="string">"anchor-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if><diff:ws>
</diff:ws><else>else<block type="pseudo"><block_content><diff:ws>
    </diff:ws><expr_stmt><expr><name>anchorType</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><literal type="string">"as-char"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt><diff:ws> </diff:ws><comment type="line">//<diff:ws> </diff:ws>default<diff:ws> </diff:ws>value</comment><diff:ws>

</diff:ws></diff:insert><diff:ws>    </diff:ws><diff:common><comment type="line">// page anchored shapes are handled differently</comment>
<diff:delete><diff:ws>    </diff:ws></diff:delete><if_stmt><if>if <condition>(<expr><name>anchorType</name> <operator>!=</operator> <literal type="string">"page"</literal></expr>)</condition> <block>{<block_content>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><decl_stmt><decl><type><name>KoTextAnchor</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><operator>new</operator> <call><name>KoTextAnchor</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><expr_stmt><expr><call><name><name>anchor</name><operator>-&gt;</operator><name>loadOdfFromShape</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>textSharedData</name><operator>-&gt;</operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <diff:delete><diff:ws>    </diff:ws></diff:delete><decl_stmt><decl><type><name>KoTextDocumentLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>KoTextDocumentLayout</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>block</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>document</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>documentLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>
        <diff:delete><diff:ws>    </diff:ws></diff:delete><decl_stmt><decl><type><name>KoInlineTextObjectManager</name> <modifier>*</modifier></type><name>textObjectManager</name> <init>= <expr><call><name><name>layout</name><operator>-&gt;</operator><name>inlineTextObjectManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <diff:delete><diff:ws>    </diff:ws></diff:delete><if_stmt><if>if <condition>(<expr><name>textObjectManager</name></expr>)</condition> <block>{<block_content>
            <diff:delete><diff:ws>    </diff:ws></diff:delete><expr_stmt><expr><call><name><name>textObjectManager</name><operator>-&gt;</operator><name>insertInlineObject</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <diff:delete><diff:ws>    </diff:ws></diff:delete></block_content>}</block></if></if_stmt>
    <diff:delete><diff:ws>    </diff:ws></diff:delete></block_content>}</block></if></if_stmt>
<diff:delete><diff:ws>    </diff:ws></diff:delete></block_content>}</block></if><diff:delete><diff:ws>
   </diff:ws></diff:delete> <else>else <block>{<block_content>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><expr_stmt><expr><call><name><name>d</name><operator>-&gt;</operator><name>textSharedData</name><operator>-&gt;</operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete><diff:ws>    </diff:ws></diff:delete></block_content>}</block></else></if_stmt>
</diff:common></block_content>}</block></if></if_stmt><diff:ws>
</diff:ws></diff:delete></unit>

<unit language="C++" filename="complex|complex">
<function><type><name>bool</name></type> <name><name>AbstractRegionCommand</name><operator>::</operator><name>isApproved</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>Element</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>elements</name> <init>= <expr><call><name>cells</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>begin</name> <init>= <expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><call><name><name>elements</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>elements</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt><diff:insert><diff:ws>
    </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><name>m_checkLock</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name><name>m_sheet</name><operator>-&gt;</operator><name>cellStorage</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hasLockedCells</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
        </diff:ws><expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing<diff:ws> </diff:ws>is<diff:ws> </diff:ws>not<diff:ws> </diff:ws>possible,<diff:ws> </diff:ws>because<diff:ws> </diff:ws>some<diff:ws> </diff:ws>"</literal><diff:ws>
                                    </diff:ws><literal type="string">"cells<diff:ws> </diff:ws>are<diff:ws> </diff:ws>locked<diff:ws> </diff:ws>as<diff:ws> </diff:ws>elements<diff:ws> </diff:ws>of<diff:ws> </diff:ws>a<diff:ws> </diff:ws>matrix."</literal></expr></argument>)</argument_list></call></expr></argument>,<diff:ws>
                               </diff:ws><argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:ws>
        </diff:ws><return>return<diff:ws> </diff:ws><expr><literal type="boolean">false</literal></expr>;</return><diff:ws>
    </diff:ws></block_content>}</block></if></if_stmt></diff:insert>
<diff:insert><diff:ws>    </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>m_sheet</name><operator>-&gt;</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
    </diff:ws><diff:common>    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>begin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><ternary><condition><expr><name>m_reverse</name></expr> ?</condition><then> <expr><operator>--</operator><name>i</name></expr> </then><else>: <expr><operator>++</operator><name>i</name></expr></else></ternary></expr></incr>)</control> <block>{<block_content>
        <diff:insert><diff:ws>    </diff:ws></diff:insert><decl_stmt><decl><type><specifier>const</specifier> <name>QRect</name></type> <name>range</name> <init>= <expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <diff:insert><diff:ws>    </diff:ws></diff:insert><for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <call><name><name>range</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
            <diff:insert><diff:ws>    </diff:ws></diff:insert><for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <call><name><name>range</name><operator>.</operator><name>bottom</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
                <diff:insert><diff:ws>    </diff:ws></diff:insert><decl_stmt><decl><type><name>Cell</name></type> <name>cell</name><argument_list>(<argument><expr><name>m_sheet</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <diff:insert><diff:ws>    </diff:ws></diff:insert><if_stmt><if>if <condition>(<expr><diff:delete><call><name><name>m_sheet</name><operator>-&gt;</operator><name>isProtected</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws></diff:delete><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>style</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notProtected</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <diff:insert><diff:ws>    </diff:ws></diff:insert><expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing is not possible, "</literal>
                                                <diff:insert><diff:ws>    </diff:ws></diff:insert><literal type="string">"because some cells are protected."</literal></expr></argument>)</argument_list></call></expr></argument>,
                                           <diff:insert><diff:ws>    </diff:ws></diff:insert><argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <diff:insert><diff:ws>    </diff:ws></diff:insert><return>return <expr><literal type="boolean">false</literal></expr>;</return>
                <diff:insert><diff:ws>    </diff:ws></diff:insert></block_content>}</block></if></if_stmt>
<diff:delete><diff:ws>
                </diff:ws><comment type="line">//<diff:ws> </diff:ws>check<diff:ws> </diff:ws>for<diff:ws> </diff:ws>matrix<diff:ws> </diff:ws>locks</comment><diff:ws>
                </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><name>m_checkLock</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name><name>cell</name><operator>.</operator><name>isLocked</name></name><argument_list>()</argument_list></call></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
                    </diff:ws><expr_stmt><expr><call><name><name>KPassivePopup</name><operator>::</operator><name>message</name></name><argument_list>(<argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Processing<diff:ws> </diff:ws>is<diff:ws> </diff:ws>not<diff:ws> </diff:ws>possible,<diff:ws> </diff:ws>because<diff:ws> </diff:ws>some<diff:ws> </diff:ws>"</literal><diff:ws>
                                                </diff:ws><literal type="string">"cells<diff:ws> </diff:ws>are<diff:ws> </diff:ws>locked<diff:ws> </diff:ws>as<diff:ws> </diff:ws>elements<diff:ws> </diff:ws>of<diff:ws> </diff:ws>a<diff:ws> </diff:ws>matrix."</literal></expr></argument>)</argument_list></call></expr></argument>,<diff:ws>
                                           </diff:ws><argument><expr><call><name><name>QApplication</name><operator>::</operator><name>activeWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:ws>
                    </diff:ws><return>return<diff:ws> </diff:ws><expr><literal type="boolean">false</literal></expr>;</return><diff:ws>
                </diff:ws></block_content>}</block></if></if_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert><diff:ws>    </diff:ws></diff:insert>            </block_content>}</block></for>
        <diff:insert><diff:ws>    </diff:ws></diff:insert></block_content>}</block></for>
    <diff:insert><diff:ws>    </diff:ws></diff:insert></block_content>}</block></for>
</diff:common><diff:ws>    </diff:ws></block_content>}</block></if></if_stmt><diff:ws>
</diff:ws></diff:insert>    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="complex|complex">
<diff:delete><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>shape</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
    </diff:ws><diff:common><decl_stmt><decl><type><name>string</name></type> <name>type</name><diff:delete><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>shape</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"anchor"</literal></expr></argument>)</argument_list></call></expr></init></diff:delete></decl>;</decl_stmt>
</diff:common><diff:ws>    </diff:ws><diff:common><if_stmt><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <literal type="string">"page"</literal></expr>)</condition> <block>{<block_content>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><decl_stmt><decl><type><name>Anchor</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><operator>new</operator>
        <diff:delete><diff:ws>    </diff:ws></diff:delete><call><name>Anchor</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete><diff:ws>    </diff:ws></diff:delete><expr_stmt><expr><call><name><name>anchor</name><operator>.</operator><name>loadFromShape</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete><diff:ws>    </diff:ws></diff:delete></block_content>}</block></if></if_stmt>
</diff:common></block_content>}</block></if></if_stmt><diff:ws>
</diff:ws></diff:delete></unit>

<unit language="C++" filename="complex|complex">
<function><type><name>void</name></type> <name><name>KisToolSelectPolygonal</name><operator>::</operator><name>finish</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>currentImage</name><argument_list>()</argument_list></call><diff:insert><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name><name>m_points</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>&gt;</operator><diff:ws> </diff:ws><literal type="number">2</literal></diff:insert></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setOverrideCursor</name></name><argument_list>(<argument><expr><call><name><name>KisCursor</name><operator>::</operator><name>waitCursor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>KisCanvas2</name> <modifier>*</modifier></type> <name>kisCanvas</name> <init>= <expr><cast type="dynamic">dynamic_cast<argument_list type="generic">&lt;<argument><expr><name>KisCanvas2</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>m_canvas</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kisCanvas</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>currentNode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KisSelectionToolHelper</name></type> <name>helper</name><argument_list>(<argument><expr><name>kisCanvas</name></expr></argument>, <argument><expr><call><name>currentNode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>i18n</name><argument_list>(<argument><expr><literal type="string">"Polygonal Selection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>m_selectionMode</name> <operator>==</operator> <name>PIXEL_SELECTION</name></expr>)</condition> <block>{<block_content>

            <decl_stmt><decl><type><name>KisPixelSelectionSP</name></type> <name>tmpSel</name> <init>= <expr><call><name>KisPixelSelectionSP</name><argument_list>(<argument><expr><operator>new</operator> <call><name>KisPixelSelection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>KisPainter</name></type> <name>painter</name><argument_list>(<argument><expr><name>tmpSel</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><call><name>currentImage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>bounds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setPaintColor</name></name><argument_list>(<argument><expr><call><name>KoColor</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>black</name></name></expr></argument>, <argument><expr><call><name><name>tmpSel</name><operator>-&gt;</operator><name>colorSpace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setFillStyle</name></name><argument_list>(<argument><expr><name><name>KisPainter</name><operator>::</operator><name>FillStyleForegroundColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setStrokeStyle</name></name><argument_list>(<argument><expr><name><name>KisPainter</name><operator>::</operator><name>StrokeStyleNone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setAntiAliasPolygonFill</name></name><argument_list>(<argument><expr><call><name><name>m_optWidget</name><operator>-&gt;</operator><name>antiAliasSelection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setOpacity</name></name><argument_list>(<argument><expr><name>OPACITY_OPAQUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setPaintOpPreset</name></name><argument_list>(<argument><expr><call><name>currentPaintOpPreset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>currentImage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// And now the painter owns the op and will destroy it.</comment>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setCompositeOp</name></name><argument_list>(<argument><expr><call><name><name>tmpSel</name><operator>-&gt;</operator><name>colorSpace</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>compositeOp</name><argument_list>(<argument><expr><name>COMPOSITE_OVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>paintPolygon</name></name><argument_list>(<argument><expr><name>m_points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>QUndoCommand</name><modifier>*</modifier></type> <name>cmd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>selectPixelSelection</name></name><argument_list>(<argument><expr><name>tmpSel</name></expr></argument>, <argument><expr><name>m_selectAction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m_canvas</name><operator>-&gt;</operator><name>addCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>

<diff:delete><diff:ws>            </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>m_points</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>&gt;</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
</diff:ws><diff:common>                <decl_stmt><decl><type><name>KoPathShape</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>KoPathShape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>path</name><operator>-&gt;</operator><name>setShapeId</name></name><argument_list>(<argument><expr><name>KoPathShapeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>QMatrix</name></type> <name>resolutionMatrix</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>resolutionMatrix</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <call><name>currentImage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>xRes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <call><name>currentImage</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>yRes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name><operator>-&gt;</operator><name>moveTo</name></name><argument_list>(<argument><expr><call><name><name>resolutionMatrix</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name><name>m_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>m_points</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>path</name><operator>-&gt;</operator><name>lineTo</name></name><argument_list>(<argument><expr><call><name><name>resolutionMatrix</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name><name>m_points</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><call><name><name>path</name><operator>-&gt;</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name><operator>-&gt;</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>addSelectionShape</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</diff:common><diff:ws>            </diff:ws></block_content>}</block></if></if_stmt><diff:ws>
</diff:ws></diff:delete>        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>restoreOverrideCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>deactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="complex|complex">
<function><type><name>bool</name></type> <name><name>Sheet</name><operator>::</operator><name>testListChoose</name></name><parameter_list>(<parameter><decl><type><name>Selection</name><modifier>*</modifier></type> <name>selection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <diff:delete><diff:ws> </diff:ws></diff:delete><decl_stmt><decl><type><specifier>const</specifier> <name>QPoint</name></type> <name>marker</name><argument_list>( <argument><expr><call><name><name>selection</name><operator>-&gt;</operator><name>marker</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
  <diff:delete><diff:ws> </diff:ws></diff:delete><decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name>text</name> <init>= <expr><call><name>Cell</name><argument_list>( <argument><expr><name>this</name></expr></argument>, <argument><expr><name>marker</name></expr></argument> )</argument_list></call><operator>.</operator><call><name>userInput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<diff:insert><diff:ws>  </diff:ws><decl_stmt><decl><type><name><name>Region</name><operator>::</operator><name>ConstIterator</name></name></type><diff:ws> </diff:ws><name>end</name><argument_list>(<diff:ws> </diff:ws><argument><expr><call><name><name>selection</name><operator>-&gt;</operator><name>constEnd</name></name><argument_list>()</argument_list></call></expr></argument><diff:ws> </diff:ws>)</argument_list></decl>;</decl_stmt><diff:ws>
</diff:ws></diff:insert><diff:delete><diff:ws> </diff:ws></diff:delete>    <decl_stmt><decl><type><specifier>const</specifier> <name>QRect</name></type> <name>range</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name>rect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><diff:insert><diff:ws>
 
    </diff:ws><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>bottom</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>range</name><operator>.</operator><name>bottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><diff:ws>
    </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><name>bottom</name><diff:ws> </diff:ws><operator>&gt;</operator><diff:ws> </diff:ws><call><name><name>d</name><operator>-&gt;</operator><name>cellStorage</name><operator>-&gt;</operator><name>rows</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><diff:ws> </diff:ws><expr_stmt><expr><name>bottom</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>d</name><operator>-&gt;</operator><name>cellStorage</name><operator>-&gt;</operator><name>rows</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></diff:insert>
<diff:delete><diff:ws>     </diff:ws><for>for<diff:ws> </diff:ws><control>(<diff:ws> </diff:ws><init><decl><type><name>int</name></type><diff:ws> </diff:ws><name>col</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>range</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><diff:ws> </diff:ws><condition><expr><name>col</name><diff:ws> </diff:ws><operator>&lt;=</operator><diff:ws> </diff:ws><call><name><name>range</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call></expr>;</condition><diff:ws> </diff:ws><incr><expr><operator>++</operator><name>col</name></expr></incr><diff:ws> </diff:ws>)</control><diff:ws> </diff:ws><block>{<block_content><diff:ws>
   </diff:ws><diff:common>    <for>for <control>(<diff:delete><diff:ws> </diff:ws></diff:delete><init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <diff:delete type="replace"><call><name><name>range</name><operator>.</operator><name>bottom</name></name><argument_list>()</argument_list></call></diff:delete><diff:insert type="replace"><name>bottom</name></diff:insert></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr><diff:delete><diff:ws> </diff:ws></diff:delete>)</control>
    <diff:delete><diff:ws>   </diff:ws></diff:delete><block>{<block_content><diff:insert><diff:ws>
      </diff:ws><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>col</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>range</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>-</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr></init></decl>;</decl_stmt></diff:insert>
<diff:insert><diff:ws>      </diff:ws><while>while<diff:ws> </diff:ws><condition>(<expr><literal type="number">1</literal></expr>)</condition><diff:ws> </diff:ws><block>{<block_content><diff:ws>
        </diff:ws><diff:common><decl_stmt><decl><type><specifier>const</specifier> <name>Cell</name></type> <name>cell</name><diff:delete type="replace"><argument_list>(<diff:ws> </diff:ws><argument><expr><name>this</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>col</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>row</name></expr></argument><diff:ws> </diff:ws>)</argument_list></diff:delete><diff:insert type="replace"><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>d</name><operator>-&gt;</operator><name>cellStorage</name><operator>-&gt;</operator><name>nextInRow</name></name><diff:ws> </diff:ws><argument_list>(<argument><expr><name>col</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></diff:insert></decl>;</decl_stmt>
</diff:common><diff:ws>        </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>cell</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><diff:ws> </diff:ws><break>break;</break></block_content></block></if></if_stmt><diff:ws>
        </diff:ws><expr_stmt><expr><name>col</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>cell</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><diff:ws>
        </diff:ws><if_stmt><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>cell</name><operator>.</operator><name>isDefault</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>||</operator><diff:ws> </diff:ws><operator>(</operator><name>col</name><diff:ws> </diff:ws><operator>==</operator><diff:ws> </diff:ws><literal type="number">0</literal><operator>)</operator><diff:ws> </diff:ws><operator>||</operator><diff:ws> </diff:ws><operator>(</operator><name>col</name><diff:ws> </diff:ws><operator>&gt;</operator><diff:ws> </diff:ws><call><name><name>range</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><diff:ws> </diff:ws><break>break;</break></block_content></block></if></if_stmt><diff:ws>

        </diff:ws><diff:common><if_stmt><if>if <condition>( <expr><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>isPartOfMerged</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name>col</name> <operator>==</operator> <call><name><name>marker</name><operator>.</operator><name>x</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <call><name><name>marker</name><operator>.</operator><name>y</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition>
        <diff:delete><diff:ws> </diff:ws></diff:delete><block>{<block_content>
          <diff:delete><diff:ws> </diff:ws></diff:delete><if_stmt><if>if <condition>( <expr><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>isFormula</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cell</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNumber</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
               <diff:delete><diff:ws> </diff:ws></diff:delete><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
               <diff:delete><diff:ws> </diff:ws></diff:delete><operator>!</operator><call><name><name>cell</name><operator>.</operator><name>isTime</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cell</name><operator>.</operator><name>isDate</name></name><argument_list>()</argument_list></call></expr> )</condition>
          <diff:delete><diff:ws> </diff:ws></diff:delete><block>{<block_content>
            <diff:delete><diff:ws> </diff:ws></diff:delete><if_stmt><if>if <condition>( <expr><call><name><name>cell</name><operator>.</operator><name>userInput</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>text</name></expr> )</condition><block type="pseudo"><block_content>
              <diff:delete><diff:ws> </diff:ws></diff:delete><return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
          <diff:delete><diff:ws> </diff:ws></diff:delete></block_content>}</block></if></if_stmt>
        <diff:delete><diff:ws> </diff:ws></diff:delete></block_content>}</block></if></if_stmt>
</diff:common><diff:ws>      </diff:ws></block_content>}</block></while><diff:ws>
</diff:ws></diff:insert><diff:delete><diff:ws>   </diff:ws></diff:delete>    </block_content>}</block></for>
</diff:common><diff:ws>     </diff:ws></block_content>}</block></for><diff:ws>
 </diff:ws></diff:delete>  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="complex|complex">
   <diff:delete><diff:ws> </diff:ws></diff:delete><if_stmt><if>if <condition>(<expr><call><name>read_icc_profile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>profile_rawdata</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>profile_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>profile_rawdata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>profile_data</name></expr></argument>, <argument><expr><name>profile_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>cmsHPROFILE</name></type> <name>hProfile</name> <init>= <expr><call><name>cmsOpenProfileFromMem</name><argument_list>(<argument><expr><name>profile_data</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>profile_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>hProfile</name> <operator>!=</operator> <operator>(</operator><name>cmsHPROFILE</name><operator>)</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>profile</name> <operator>=</operator> <call><name><name>KoColorSpaceRegistry</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>createColorProfile</name><argument_list>(<argument><expr><name>modelId</name></expr></argument>, <argument><expr><call><name><name>Integer8BitsColorDepthID</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>profile_rawdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Q_CHECK_PTR</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete type="replace"><comment type="line">//<diff:ws>             </diff:ws>dbgFile<diff:ws> </diff:ws>&lt;&lt;"profile<diff:ws> </diff:ws>name:"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>profile-&gt;productName()<diff:ws> </diff:ws>&lt;&lt;"<diff:ws> </diff:ws>profile<diff:ws> </diff:ws>description:"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>profile-&gt;productDescription()<diff:ws> </diff:ws>&lt;&lt;"<diff:ws> </diff:ws>information<diff:ws> </diff:ws>sur<diff:ws> </diff:ws>le<diff:ws> </diff:ws>produit:"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>profile-&gt;productInfo();</comment></diff:delete><diff:insert type="replace"><diff:ws>            </diff:ws><expr_stmt><expr><name>dbgFile</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><literal type="string">"profile<diff:ws> </diff:ws>name:"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><call><name><name>profile</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>&lt;&lt;</operator><literal type="string">"<diff:ws> </diff:ws>product<diff:ws> </diff:ws>information:"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><call><name><name>profile</name><operator>-&gt;</operator><name>info</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></diff:insert>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>profile</name><operator>-&gt;</operator><name>isSuitableForOutput</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>dbgFile</name> <operator>&lt;&lt;</operator> <literal type="string">"the profile is not suitable for output and therefore cannot be used in krita, we need to convert the image to a standard profile"</literal></expr>;</expr_stmt> <comment type="line">// TODO: in ko2 popup a selection menu to inform the user</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</unit>

<unit language="C++" filename="complex|complex">
<if_stmt><if>if<condition>( <expr><name>path</name> <operator>&amp;&amp;</operator> <call><name><name>shape</name><operator>-&gt;</operator><name>background</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
<diff:insert><diff:ws>    </diff:ws><comment type="line">//<diff:ws> </diff:ws>non-zero<diff:ws> </diff:ws>is<diff:ws> </diff:ws>default,<diff:ws> </diff:ws>so<diff:ws> </diff:ws>only<diff:ws> </diff:ws>write<diff:ws> </diff:ws>fillrule<diff:ws> </diff:ws>if<diff:ws> </diff:ws>evenodd<diff:ws> </diff:ws>is<diff:ws> </diff:ws>set</comment></diff:insert>
    <if_stmt><if>if<condition>( <expr><call><name><name>path</name><operator>-&gt;</operator><name>fillRule</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>OddEvenFill</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>stream</name> <operator>&lt;&lt;</operator> <literal type="string">" fill-rule=\"evenodd\""</literal></expr>;</expr_stmt></block_content></block></if><diff:delete><diff:ws>
    </diff:ws><else>else<block type="pseudo"><block_content><diff:ws>
        </diff:ws><expr_stmt><expr><operator>*</operator><name>stream</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"<diff:ws> </diff:ws>fill-rule=\"nonzero\""</literal></expr>;</expr_stmt></block_content></block></else></diff:delete></if_stmt>
</block_content>}</block></if></if_stmt>
</unit>

<unit language="C++" filename="complex|complex">
<if>if<condition>(<expr><operator>!</operator><call><name><name>paraStyles</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>ID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><diff:delete type="replace"><diff:ws> </diff:ws><block>{<diff:ws>
    </diff:ws><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>id</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>root</name><operator>.</operator><name>ID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><diff:ws>
    </diff:ws><if>if<condition>(<expr><name>id</name><diff:ws> </diff:ws><operator>!=</operator><diff:ws> </diff:ws><name>tree_rootID</name></expr>)</condition><then><block type="pseudo"><diff:ws>
        </diff:ws><expr_stmt><expr><call><name><name>tree_root</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><diff:ws>
</diff:ws>}</block></diff:delete><diff:insert type="replace"><block type="pseudo"><diff:ws>
    </diff:ws><expr_stmt><expr><name>tree_root</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><call><name><name>root</name><operator>.</operator><name>ID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></diff:insert></then></if>
</unit>

<unit language="C++" filename="complex|complex">
<function><type><name>bool</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
<diff:delete><diff:ws>  </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><literal type="number">1</literal></expr>)</condition><then><diff:ws> </diff:ws><block>{<diff:ws>
  </diff:ws><diff:common>  <decl_stmt><decl><type><diff:delete><specifier>const</specifier><diff:ws> </diff:ws></diff:delete><name>MultiTermQueryDocValuesWrapper</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>MultiTermQueryDocValuesWrapper</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
  </diff:common><diff:ws>  </diff:ws><diff:common><return>return <expr><call><name><diff:delete><name>this</name><operator>.</operator></diff:delete><name>query</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call><diff:delete><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name><name>this</name><operator>.</operator><name>getBoost</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>==</operator><diff:ws> </diff:ws><call><name><name>that</name><operator>.</operator><name>getBoost</name></name><argument_list>()</argument_list></call></diff:delete></expr>;</return>
</diff:common><diff:ws>  </diff:ws>}</block></then></if><diff:ws>
  </diff:ws><return>return<diff:ws> </diff:ws><expr><literal type="boolean">false</literal></expr>;</return><diff:ws>
</diff:ws></diff:delete>}</block></function>
</unit>

<unit language="C++" filename="complex|complex">
<if>if<condition>(<expr><diff:delete type="replace"><call><name>reject_match_nested</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>difference</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_original_length</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_modified_length</name></expr></argument>,<diff:ws>
  </diff:ws><argument><expr><name>nodes_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>set</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><diff:ws>
</diff:ws><operator>||</operator><diff:ws> </diff:ws><call><name>is_better_nest</name><argument_list>(<argument><expr><name>nodes_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>similarity</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>difference</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_modified_length</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_original_length</name></expr></argument>)</argument_list></call><diff:ws>
</diff:ws><operator>||</operator><diff:ws> </diff:ws><operator>(</operator><name>i</name><diff:ws> </diff:ws><operator>+</operator><diff:ws> </diff:ws><literal type="number">1</literal><diff:ws> </diff:ws><operator>&lt;</operator><diff:ws> </diff:ws><name>end_original</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name>is_better_nest</name><argument_list>(<argument><expr><name>nodes_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name><diff:ws> </diff:ws><operator>+</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>similarity</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>difference</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_original_length</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_modified_length</name></expr></argument>)</argument_list></call><operator>)</operator><diff:ws>
</diff:ws><operator>||</operator><diff:ws> </diff:ws><operator>(</operator><name>k</name><diff:ws> </diff:ws><operator>+</operator><diff:ws> </diff:ws><literal type="number">1</literal><diff:ws> </diff:ws><operator>&lt;</operator><diff:ws> </diff:ws><name>end_modified</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name>is_better_nest</name><argument_list>(<argument><expr><name>nodes_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>k</name><diff:ws> </diff:ws><operator>+</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>similarity</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>difference</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_modified_length</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_original_length</name></expr></argument>)</argument_list></call><operator>)</operator></diff:delete><diff:insert type="replace"><call><name>check_nestable_predicate</name><argument_list>(<argument><expr><name>similarity</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>difference</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_original_length</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>text_modified_length</name></expr></argument>,<diff:ws>
   </diff:ws><argument><expr><call><name><name>set</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>node_sets_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>k</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>end_original</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>nodes_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>node_sets_modified</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>j</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><name>end_modified</name></expr></argument>)</argument_list></call></diff:insert></expr><diff:delete><diff:ws>
</diff:ws></diff:delete>)</condition><then><block type="pseudo">
    <continue>continue;</continue></block></then></if>
</unit>

</unit>
