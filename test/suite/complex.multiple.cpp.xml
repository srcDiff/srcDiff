<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:diff="http://www.sdml.info/srcDiff" language="C++" dir="complex.multiple">

<unit filename="complex.multiple|complex.multiple">
<diff:delete><if>if <condition>(<expr><call><name><name>shape</name><op:operator>-&gt;</op:operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><lit:literal type="string">"text:anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <diff:common><decl_stmt><decl><type><name>QString</name></type> <name>anchorType</name><diff:delete> <init>= <expr><call><name><name>shape</name><op:operator>-&gt;</op:operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><lit:literal type="string">"text:anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr></init></diff:delete></decl>;</decl_stmt>
</diff:common><diff:insert><if>if <condition>(<expr><call><name><name>shape</name><op:operator>-&gt;</op:operator><name>hasAdditionalAttribute</name></name><argument_list>(<argument><expr><lit:literal type="string">"text:anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <op:operator>=</op:operator> <call><name><name>shape</name><op:operator>-&gt;</op:operator><name>additionalAttribute</name></name><argument_list>(<argument><expr><lit:literal type="string">"text:anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
<elseif>else <if>if <condition>(<expr><call><name><name>element</name><op:operator>.</op:operator><name>hasAttributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><op:operator>::</op:operator><name>text</name></name></expr></argument>, <argument><expr><lit:literal type="string">"anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <op:operator>=</op:operator> <call><name><name>element</name><op:operator>.</op:operator><name>attributeNS</name></name><argument_list>(<argument><expr><name><name>KoXmlNS</name><op:operator>::</op:operator><name>text</name></name></expr></argument>, <argument><expr><lit:literal type="string">"anchor-type"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
<else>else
    <block type="pseudo"><expr_stmt><expr><name>anchorType</name> <op:operator>=</op:operator> <lit:literal type="string">"as-char"</lit:literal></expr>;</expr_stmt></block></else></if> <comment type="line">// default value</comment>

</diff:insert>    <diff:common><comment type="line">// page anchored shapes are handled differently</comment>
<diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>anchorType</name> <op:operator>!=</op:operator> <lit:literal type="string">"page"</lit:literal></expr>)</condition><then> <block>{
    <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoTextAnchor</name> <type:modifier>*</type:modifier></type><name>anchor</name> <init>= <expr><op:operator>new</op:operator> <call><name>KoTextAnchor</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>anchor</name><op:operator>-&gt;</op:operator><name>loadOdfFromShape</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>d</name><op:operator>-&gt;</op:operator><name>textSharedData</name><op:operator>-&gt;</op:operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><op:operator>-&gt;</op:operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoTextDocumentLayout</name> <type:modifier>*</type:modifier></type><name>layout</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list>&lt;<argument><expr><name>KoTextDocumentLayout</name><op:operator>*</op:operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cursor</name><op:operator>.</op:operator><name>block</name></name><argument_list>()</argument_list></call><op:operator>.</op:operator><call><name>document</name><argument_list>()</argument_list></call><op:operator>-&gt;</op:operator><call><name>documentLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>layout</name></expr>)</condition><then> <block>{
        <diff:delete type="whitespace">    </diff:delete><decl_stmt><decl><type><name>KoInlineTextObjectManager</name> <type:modifier>*</type:modifier></type><name>textObjectManager</name> <init>= <expr><call><name><name>layout</name><op:operator>-&gt;</op:operator><name>inlineTextObjectManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <diff:delete type="whitespace">    </diff:delete><if>if <condition>(<expr><name>textObjectManager</name></expr>)</condition><then> <block>{
            <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>textObjectManager</name><op:operator>-&gt;</op:operator><name>insertInlineObject</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <diff:delete type="whitespace">    </diff:delete>}</block></then></if>
    <diff:delete type="whitespace">    </diff:delete>}</block></then></if>
<diff:delete type="whitespace">    </diff:delete>}</block></then><diff:delete type="whitespace">
   </diff:delete> <else>else <block>{
    <diff:delete type="whitespace">    </diff:delete><expr_stmt><expr><call><name><name>d</name><op:operator>-&gt;</op:operator><name>textSharedData</name><op:operator>-&gt;</op:operator><name>shapeInserted</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>d</name><op:operator>-&gt;</op:operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete type="whitespace">    </diff:delete>}</block></else></if>
</diff:common>}</block></then></if>
</diff:delete></unit>

</unit>
