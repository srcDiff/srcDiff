<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:diff="http://www.srcML.org/srcDiff" language="C++" url="edit_correction">

<unit language="C++" filename="edit_correction|edit_correction">
<diff:delete move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete><if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

	<expr_stmt><expr><name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name></expr>;</expr_stmt>
<diff:delete type="replace"><diff:ws>	</diff:ws><expr_stmt><expr><name>g</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><diff:ws>	</diff:ws><expr_stmt><expr><name>h</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:insert>

</block_content>}</block></if></if_stmt>
<diff:insert move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:insert><diff:insert><diff:ws>
</diff:ws></diff:insert><expr_stmt><expr><name>bar</name></expr>;</expr_stmt><diff:delete><diff:ws>
</diff:ws></diff:delete></unit>

<unit language="C++" filename="edit_correction|edit_correction">
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_pos</name> <init>= <expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>start_original</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<diff:insert move="1"><decl_stmt><decl><type><name>size_t</name></type><diff:ws> </diff:ws><name>end_pos</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>end_original</name><diff:ws> </diff:ws><operator>-</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></diff:insert>
<diff:insert><diff:ws>
</diff:ws></diff:insert><decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type> <name>structure_original</name> <init>= <expr><call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>start_original</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>structure_original</name> <operator>==</operator> <literal type="string">"if"</literal> <operator>||</operator> <name>structure_original</name> <operator>==</operator> <literal type="string">"elseif"</literal></expr>)</condition> <block>{<block_content>

    <expr_stmt><expr><call><name>advance_to_tag</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>xmlElementType</name><operator>)</operator><name>XML_READER_TYPE_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">"then"</literal></expr></argument>, <argument><expr><name><diff:delete type="replace">structure_original</diff:delete><diff:insert type="replace">end_pos</diff:insert></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>structure_original</name> <operator>==</operator> <literal type="string">"while"</literal></expr>)</condition> <block>{<block_content>

    <expr_stmt><expr><call><name>advance_to_tag</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>xmlElementType</name><operator>)</operator><name>XML_READER_TYPE_END_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">"condition"</literal></expr></argument>, <argument><expr><name><diff:delete type="replace">structure_original</diff:delete><diff:insert type="replace">end_pos</diff:insert></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>start_pos</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>structure_original</name> <operator>==</operator> <literal type="string">"for"</literal></expr>)</condition> <block>{<block_content>

    <expr_stmt><expr><call><name>advance_to_tag</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>xmlElementType</name><operator>)</operator><name>XML_READER_TYPE_END_ELEMENT</name></expr></argument>, <argument><expr><literal type="string">"control"</literal></expr></argument>, <argument><expr><name><diff:delete type="replace">structure_original</diff:delete><diff:insert type="replace">end_pos</diff:insert></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>start_pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<diff:delete move="1"><decl_stmt><decl><type><name>size_t</name></type><diff:ws> </diff:ws><name>end_pos</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>end_original</name><diff:ws> </diff:ws><operator>-</operator><diff:ws> </diff:ws><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete><if_stmt><if>if<condition>(<expr><name>structure_original</name> <operator>==</operator> <literal type="string">"elseif"</literal></expr>)</condition> <block>{<block_content>

  <while>while<condition>(<expr><name>end_pos</name> <operator>&gt;</operator> <name>start_pos</name> <operator>&amp;&amp;</operator> <call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name> <operator>!=</operator> <literal type="string">"if"</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>--</operator><name>end_pos</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>node_sets</name></type> <name>set</name> <init>= <expr><call><name>node_sets</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>get_nodes_original</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>end_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>node_sets</name></type> <name>nest_set</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>get_nodes_modified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start_modified</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_modified</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>nest_set</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>node_sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><call><name>output_change</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>last_output_modified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>whitespace</name><operator>.</operator><name>output_nested</name></name><argument_list>(<argument><expr><name>SES_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>srcdiff_diff</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>out</name></type></decl></parameter>, <parameter><decl><type><name>set</name></type></decl></parameter>, <parameter><decl><type><name>nest_set</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>whitespace</name><operator>.</operator><name>output_nested</name></name><argument_list>(<argument><expr><name>SES_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>output_change</name><argument_list>(<argument><expr><call><name><name>node_sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>end_original</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>last_output_modified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<diff:insert move="1"><expr_stmt><expr><name>save_text</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><literal type="boolean">false</literal></expr>;</expr_stmt></diff:insert><diff:insert><diff:ws>

</diff:ws></diff:insert><if_stmt><if>if<condition>(<expr><call><name><name>theme</name><operator>-&gt;</operator><name>is_keyword</name></name><argument_list>(<argument><expr><call><name><name>saved_text</name><operator>.</operator><name>original</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>theme</name><operator>-&gt;</operator><name>is_keyword</name></name><argument_list>(<argument><expr><call><name><name>saved_text</name><operator>.</operator><name>modified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

  <expr_stmt><expr><call><name>output_characters</name><argument_list>(<argument><expr><call><name><name>saved_text</name><operator>.</operator><name>original</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>bash_view</name><operator>::</operator><name>DELETE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>output_characters</name><argument_list>(<argument><expr><call><name><name>saved_text</name><operator>.</operator><name>modified</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>bash_view</name><operator>::</operator><name>INSERT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

  <function_decl><type><name>character_diff</name></type> <name>char_diff</name><parameter_list>(<parameter><decl><type><name>saved_text</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name><name>char_diff</name><operator>.</operator><name>compute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>char_diff</name><operator>.</operator><name>output</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>saved_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<diff:delete move="1"><expr_stmt><expr><name>save_text</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><literal type="boolean">false</literal></expr>;</expr_stmt></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete><expr_stmt><expr><call><name><name>saved_text</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<function><type><name>edit</name> <modifier>*</modifier></type> <name><name>srcdiff_edit_correction</name><operator>::</operator><name>correct</name></name><parameter_list>()</parameter_list> <block>{<block_content>
<diff:delete><diff:ws>  </diff:ws><return>return<diff:ws> </diff:ws><expr><name>edits</name></expr>;</return></diff:delete>
  <for>for<control>(<init><decl><type><name>edit</name> <modifier>*</modifier></type> <name>edit_script</name> <init>= <expr><name>edits</name></expr></init></decl>;</init> <condition><expr><name>edit_script</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>;</condition> <incr><expr><name>edit_script</name> <operator>=</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>operation</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>common_length</name> <init>= <expr><name><name>edit_script</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>offset_sequence_one</name></name> <operator>-</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>offset_sequence_one</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>SES_DELETE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>common_length</name> <operator>-=</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>common_length</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="line">// move mistaken as common</comment>
    <decl_stmt><decl><type><name>edit</name> <modifier>*</modifier></type> <name>delete_edit</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>edit</name> <modifier>*</modifier></type> <name>insert_edit</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>SES_DELETE</name></expr>)</condition> <block>{<block_content>

      <expr_stmt><expr><name>delete_edit</name> <operator>=</operator> <name>edit_script</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>insert_edit</name> <operator>=</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>

      <expr_stmt><expr><name>delete_edit</name> <operator>=</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>insert_edit</name> <operator>=</operator> <name>edit_script</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>common_pos</name> <init>= <expr><ternary><condition><expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>SES_DELETE</name></expr> ?</condition><then> 
      <expr><name><name>edit_script</name><operator>-&gt;</operator><name>offset_sequence_one</name></name> <operator>+</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>length</name></name></expr>
      </then><else>: <expr><name><name>edit_script</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>offset_sequence_one</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>node_set</name> <modifier>&amp;</modifier></type> <name>common_set</name> <init>= <expr><call><name><name>sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>common_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>node_set</name></type> <name>common_set_text</name><argument_list>(<argument><expr><call><name><name>sets_original</name><operator>.</operator><name>nodes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>srcdiff_text_measure</name><operator>::</operator><name>collect_text_node_set</name></name><argument_list>(<argument><expr><name>common_set</name></expr></argument>, <argument><expr><name>common_set_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>delete_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>insert_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>original_set_pos</name> <init>= <expr><name><name>delete_edit</name><operator>-&gt;</operator><name>offset_sequence_one</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>modified_set_pos</name> <init>= <expr><name><name>insert_edit</name><operator>-&gt;</operator><name>offset_sequence_two</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>node_set</name> <modifier>&amp;</modifier></type> <name>set_original</name> <init>= <expr><call><name><name>sets_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>original_set_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>node_set</name> <modifier>&amp;</modifier></type> <name>set_modified</name> <init>= <expr><call><name><name>sets_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>modified_set_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int</name></type> <name>original_pos</name> <init>= <expr><call><name><name>set_original</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>modified_pos</name> <init>= <expr><call><name><name>set_modified</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type> <name>original_tag</name> <init>= <expr><call><name><name>set_original</name><operator>.</operator><name>nodes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>original_pos</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type> <name>modified_tag</name> <init>= <expr><call><name><name>set_modified</name><operator>.</operator><name>nodes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>modified_pos</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type> <name>original_uri</name> <init>= <expr><call><name><name>set_original</name><operator>.</operator><name>nodes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>original_pos</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ns</name><operator>.</operator><name>href</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type> <name>modified_uri</name> <init>= <expr><call><name><name>set_modified</name><operator>.</operator><name>nodes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>at</name><argument_list>(<argument><expr><name>modified_pos</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ns</name><operator>.</operator><name>href</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>original_tag</name> <operator>==</operator> <name>modified_tag</name> <operator>&amp;&amp;</operator> <name>original_uri</name> <operator>==</operator> <name>modified_uri</name><operator>)</operator>
          <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>srcdiff_match</name><operator>::</operator><name>is_interchangeable_match</name></name><argument_list>(<argument><expr><name>original_tag</name></expr></argument>, <argument><expr><name>original_uri</name></expr></argument>, <argument><expr><name>modified_tag</name></expr></argument>, <argument><expr><name>modified_uri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>set_original</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name><name>set_modified</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>set_modified</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name><name>set_original</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>set_original</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <call><name><name>common_set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>set_modified</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <call><name><name>common_set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>srcdiff_text_measure</name></type> <name>measure</name><argument_list>(<argument><expr><name>set_original</name></expr></argument>, <argument><expr><name>set_modified</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>measure</name><operator>.</operator><name>compute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><call><name><name>measure</name><operator>.</operator><name>similarity</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.9</literal> <operator>*</operator> <call><name><name>measure</name><operator>.</operator><name>min_length</name></name><argument_list>()</argument_list></call>
          <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>*</operator> <call><name><name>common_set_text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>measure</name><operator>.</operator><name>similarity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

          <expr_stmt><expr><operator>++</operator><name><name>delete_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name><name>insert_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

          <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>SES_DELETE</name></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><operator>--</operator><name><name>insert_edit</name><operator>-&gt;</operator><name>offset_sequence_two</name></name></expr>;</expr_stmt>

          </block_content>}</block></if> <else>else <block>{<block_content>

            <expr_stmt><expr><operator>--</operator><name><name>delete_edit</name><operator>-&gt;</operator><name>offset_sequence_one</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>delete_edit</name><operator>-&gt;</operator><name>offset_sequence_two</name></name> <operator>-=</operator> <name><name>insert_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>insert_edit</name><operator>-&gt;</operator><name>offset_sequence_one</name></name> <operator>+=</operator> <name><name>delete_edit</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
            
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>SES_INSERT</name></expr>)</condition> <block>{<block_content>

            <if_stmt><if>if<condition>(<expr><name><name>edit_script</name><operator>-&gt;</operator><name>previous</name></name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name><name>edit_script</name><operator>-&gt;</operator><name>previous</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>delete_edit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
            <expr_stmt><expr><name><name>delete_edit</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>edit_script</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>edit</name> <modifier>*</modifier></type> <name>after</name> <init>= <expr><name><name>delete_edit</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>delete_edit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>insert_edit</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>insert_edit</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>delete_edit</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>insert_edit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>after</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>after</name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name><name>after</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>insert_edit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name>insert_edit</name> <operator>==</operator> <name>edits</name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name>edits</name> <operator>=</operator> <name>delete_edit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

          </block_content>}</block></if></if_stmt>

<diff:delete><diff:ws>          </diff:ws><expr_stmt><expr><name>edit_script</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><name>insert_edit</name></expr>;</expr_stmt><diff:ws>        

          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>original_set_pos</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'\n'</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>modified_set_pos</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"\n\n"</literal></expr>;</expr_stmt><diff:ws>

          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>delete_edit</name><operator>-&gt;</operator><name>offset_sequence_one</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'\n'</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>delete_edit</name><operator>-&gt;</operator><name>offset_sequence_two</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'\n'</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>delete_edit</name><operator>-&gt;</operator><name>length</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"\n\n"</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>insert_edit</name><operator>-&gt;</operator><name>offset_sequence_one</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'\n'</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>insert_edit</name><operator>-&gt;</operator><name>offset_sequence_two</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'\n'</literal></expr>;</expr_stmt><diff:ws>
          </diff:ws><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"HERE:<diff:ws> </diff:ws>"</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FILE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__FUNCTION__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name>__LINE__</name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="char">'<diff:ws> </diff:ws>'</literal><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><name><name>insert_edit</name><operator>-&gt;</operator><name>length</name></name><diff:ws> </diff:ws><operator>&lt;&lt;</operator><diff:ws> </diff:ws><literal type="string">"\n\n"</literal></expr>;</expr_stmt><diff:ws>

</diff:ws></diff:delete>          <expr_stmt><expr><diff:insert><name>edit_script</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:insert><call><name>split_change</name><argument_list>(<argument><expr><name>delete_edit</name></expr></argument>, <argument><expr><name>insert_edit</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<diff:insert><diff:ws>          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>original_set_pos<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'\n';</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>modified_set_pos<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"\n\n";</comment><diff:ws>

          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>delete_edit-&gt;offset_sequence_one<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'\n';</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>delete_edit-&gt;offset_sequence_two<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'\n';</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>delete_edit-&gt;length<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"\n\n";</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>insert_edit-&gt;offset_sequence_one<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'\n';</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>insert_edit-&gt;offset_sequence_two<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'\n';</comment><diff:ws>
          </diff:ws><comment type="line">//<diff:ws> </diff:ws>std::cerr<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"HERE:<diff:ws> </diff:ws>"<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FILE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__FUNCTION__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>__LINE__<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>'<diff:ws> </diff:ws>'<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>insert_edit-&gt;length<diff:ws> </diff:ws>&lt;&lt;<diff:ws> </diff:ws>"\n\n";</comment><diff:ws>

</diff:ws></diff:insert>          <goto>goto <name>end_move_check</name>;</goto>

        </block_content>}</block></if></if_stmt>

      </block_content>}</block></for>

    </block_content>}</block></for>

<label><name>end_move_check</name>:</label>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/** @todo choose smaller move */</comment>

  </block_content>}</block></for>

  <return>return <expr><name>edits</name></expr>;</return>

</block_content>}</block></function>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<diff:delete type="replace"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><diff:ws>
</diff:ws><diff:delete move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:delete><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><expr_stmt><expr><name>c</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:insert>
<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>f</name><operator>.</operator><name>g</name><operator>.</operator><name>h</name><operator>.</operator><name>j</name><operator>.</operator><name>k</name><operator>.</operator><name>l</name><operator>.</operator><name>m</name><operator>.</operator><name>n</name><operator>.</operator><name>o</name><operator>.</operator><name><diff:delete type="replace">p</diff:delete><diff:insert type="replace">q</diff:insert></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<diff:delete type="replace"><expr_stmt><expr><name>d</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><diff:insert move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:insert><diff:ws>
</diff:ws></diff:insert>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<diff:delete type="replace"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><diff:ws>
</diff:ws><diff:delete move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:delete><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><expr_stmt><expr><name>c</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:insert>
<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>f</name><operator>.</operator><name>g</name><operator>.</operator><name>h</name><operator>.</operator><name>j</name><operator>.</operator><name>k</name><operator>.</operator><name>l</name><operator>.</operator><name>m</name><operator>.</operator><name>n</name><operator>.</operator><name>o</name><operator>.</operator><name><diff:delete type="replace">p</diff:delete><diff:insert type="replace">q</diff:insert></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<diff:delete type="replace"><expr_stmt><expr><name>d</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><diff:insert move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:insert><diff:ws>
</diff:ws><expr_stmt><expr><name>e</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:insert>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<diff:delete move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete><expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>f</name><operator>.</operator><name>g</name><operator>.</operator><name>h</name><operator>.</operator><name>j</name><operator>.</operator><name>k</name><operator>.</operator><name>l</name><operator>.</operator><name>m</name><operator>.</operator><name>n</name><operator>.</operator><name>o</name><operator>.</operator><name><diff:delete type="replace">p</diff:delete><diff:insert type="replace">q</diff:insert></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<diff:delete type="replace"><expr_stmt><expr><name>d</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert type="replace"><diff:insert move="1"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></diff:insert><diff:ws>
</diff:ws><expr_stmt><expr><name>e</name></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:insert>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<constructor><name><name>srcdiff_output</name><operator>::</operator><name>srcdiff_output</name></name><parameter_list>(<diff:delete><parameter><decl><type><specifier>const</specifier><diff:ws> </diff:ws><name>char</name><diff:ws> </diff:ws><modifier>*</modifier></type><diff:ws> </diff:ws><name>prefix</name></decl></parameter>,<diff:ws> </diff:ws></diff:delete><parameter><decl><type><diff:insert><specifier>const</specifier><diff:ws> </diff:ws></diff:insert><name><name>std</name><operator>::</operator><name>string</name></name><diff:insert><diff:ws> </diff:ws><modifier>&amp;</modifier></diff:insert></type> <name>css</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>number_context_lines</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></constructor>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>characters</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> 
    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>characters</name></expr></argument>)</argument_list></call>
    <operator>&amp;&amp;</operator> <operator>!</operator><diff:insert><operator>(</operator><name>in_comment</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws></diff:insert><call><name>is_comment_separate</name><argument_list>(<diff:delete><argument><expr><call><name><name>element_stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>,<diff:ws> </diff:ws></diff:delete><argument><expr><operator>*</operator><name>characters</name></expr></argument>)</argument_list></call><diff:insert><operator>)</operator></diff:insert>
    <operator>&amp;&amp;</operator> <operator>!</operator><diff:insert><operator>(</operator><name>in_cpp_file</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws></diff:insert><call><name>is_cpp_file_separate</name><argument_list>(<diff:delete><argument><expr><call><name><name>element_stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>,<diff:ws> </diff:ws></diff:delete><argument><expr><operator>*</operator><name>characters</name></expr></argument>)</argument_list></call><diff:insert><operator>)</operator></diff:insert>
    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_separate_token</name><argument_list>(<argument><expr><operator>*</operator><name>characters</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><operator>++</operator><name>characters</name></expr>;</expr_stmt></block_content></block></while>
</unit>

<unit language="C++" filename="edit_correction|edit_correction">
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>dim</name></parameter>, <parameter><type><name>typename</name></type> <name>Accessor</name></parameter>&gt;</parameter_list></template>
<type><specifier>inline</specifier>
<specifier>const</specifier> <name>Accessor</name> <modifier>&amp;</modifier></type>
<name><name><name>TriaRawIterator</name><argument_list type="generic">&lt;<argument><expr><name>dim</name></expr></argument>,<argument><expr><name>Accessor</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator <name>*</name></name></name> <parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
  <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IteratorState</name><operator>::</operator><name>valid</name></name></expr></argument>,<diff:delete><diff:ws>
         </diff:ws></diff:delete> <argument><expr><call><name>ExcDereferenceInvalidObject</name><argument_list>(<diff:delete><argument><expr><operator>*</operator><name>this</name></expr></argument></diff:delete>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>accessor</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>



<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>dim</name></parameter>, <parameter><type><name>typename</name></type> <name>Accessor</name></parameter>&gt;</parameter_list></template>
<type><specifier>inline</specifier>
<name>Accessor</name> <modifier>&amp;</modifier></type>
<name><name><name>TriaRawIterator</name><argument_list type="generic">&lt;<argument><expr><name>dim</name></expr></argument>,<argument><expr><name>Accessor</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator <name>*</name></name></name> <parameter_list>()</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>IteratorState</name><operator>::</operator><name>valid</name></name></expr></argument>,<diff:delete><diff:ws>
         </diff:ws></diff:delete> <argument><expr><call><name>ExcDereferenceInvalidObject</name><argument_list>(<diff:delete><argument><expr><operator>*</operator><name>this</name></expr></argument></diff:delete>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>accessor</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
</unit>

</unit>
