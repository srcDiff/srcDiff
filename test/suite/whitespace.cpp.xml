<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:diff="http://www.srcML.org/srcDiff" language="C++" url="whitespace">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" filename="whitespace|whitespace">
<diff:delete><diff:ws>  </diff:ws></diff:delete><expr_stmt><expr><name>a</name></expr>;</expr_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" filename="whitespace|whitespace">
  <diff:delete><diff:ws>  </diff:ws></diff:delete><expr_stmt><expr><name>a</name></expr>;</expr_stmt>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" filename="whitespace|whitespace">
<diff:delete><diff:ws>    </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><operator>(</operator><call><name><name>shape</name><operator>-&gt;</operator><name>shapeId</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>==</operator><diff:ws> </diff:ws><name>KIS_NODE_SHAPE_ID</name><diff:ws>
            </diff:ws><operator>||</operator><diff:ws> </diff:ws><call><name><name>shape</name><operator>-&gt;</operator><name>shapeId</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>==</operator><diff:ws> </diff:ws><name>KIS_SHAPE_LAYER_ID</name><diff:ws>
            </diff:ws><operator>||</operator><diff:ws> </diff:ws><call><name><name>shape</name><operator>-&gt;</operator><name>shapeId</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>==</operator><diff:ws> </diff:ws><name>KIS_LAYER_CONTAINER_ID</name><operator>)</operator><diff:ws> </diff:ws><comment type="line">//<diff:ws> </diff:ws>Those<diff:ws> </diff:ws>shape<diff:ws> </diff:ws>can<diff:ws> </diff:ws>be<diff:ws> </diff:ws>in<diff:ws> </diff:ws>a<diff:ws> </diff:ws>selection</comment><diff:ws>
            </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><operator>(</operator><call><name><name>KoToolManager</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>activeCanvasController</name><argument_list>()</argument_list></call><diff:ws>
                </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><call><name><name>KoToolManager</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>activeCanvasController</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>canvas</name><argument_list>()</argument_list></call><operator>)</operator><diff:ws> </diff:ws><comment type="line">//<diff:ws> </diff:ws>FIXME<diff:ws> </diff:ws>don't<diff:ws> </diff:ws>we<diff:ws> </diff:ws>check<diff:ws> </diff:ws>twice<diff:ws> </diff:ws>for<diff:ws> </diff:ws>the<diff:ws> </diff:ws>same<diff:ws> </diff:ws>thing<diff:ws> </diff:ws>?</comment><diff:ws>
            </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><operator>(</operator><name>canvas</name><diff:ws> </diff:ws><operator>=</operator><diff:ws>  </diff:ws><cast type="dynamic">dynamic_cast<argument_list type="generic">&lt;<argument><expr><name>KisCanvas2</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>KoToolManager</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>activeCanvasController</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>canvas</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast><operator>)</operator><diff:ws>
            </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><operator>(</operator><name>selection</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>canvas</name><operator>-&gt;</operator><name>view</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>selection</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then><diff:ws> </diff:ws><block>{<diff:ws>
        </diff:ws><comment type="line">//<diff:ws> </diff:ws>Has<diff:ws> </diff:ws>a<diff:ws> </diff:ws>selection,<diff:ws> </diff:ws>be<diff:ws> </diff:ws>in<diff:ws> </diff:ws>a<diff:ws> </diff:ws>seclection,<diff:ws> </diff:ws>remove<diff:ws> </diff:ws>it<diff:ws> </diff:ws>from<diff:ws> </diff:ws>there</comment><diff:ws>
        </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><call><name><name>selection</name><operator>-&gt;</operator><name>hasShapeSelection</name></name><argument_list>()</argument_list></call></expr>)</condition><then><diff:ws> </diff:ws><block>{<diff:ws>
        </diff:ws><diff:common>    <decl_stmt><decl><type><name>KisShapeSelection</name> <modifier>*</modifier></type> <name>shapeSelection</name> <init>= <expr><cast type="static|dynamic"><diff:delete type="replace">static_cast</diff:delete><diff:insert type="replace">dynamic_cast</diff:insert><argument_list type="generic">&lt;<argument><expr><name>KisShapeSelection</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><diff:delete type="replace"><call><name><name>selection</name><operator>-&gt;</operator><name>shapeSelection</name></name><argument_list>()</argument_list></call></diff:delete><diff:insert type="replace"><call><name><name>shape</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call></diff:insert></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
</diff:common><diff:ws>            </diff:ws><expr_stmt><expr><call><name><name>shapeSelection</name><operator>-&gt;</operator><name>removeChild</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:ws>
        </diff:ws>}</block></then></if><diff:ws>
    </diff:ws>}</block></then><diff:ws> </diff:ws><else>else<diff:ws> </diff:ws><block>{<diff:ws>
        </diff:ws><decl_stmt><decl><type><name>KisShapeLayer</name><diff:ws> </diff:ws><modifier>*</modifier></type><diff:ws> </diff:ws><name>shapeLayer</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><cast type="dynamic">dynamic_cast<argument_list type="generic">&lt;<argument><expr><name>KisShapeLayer</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>shape</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt><diff:ws>

        </diff:ws><comment type="line">//<diff:ws> </diff:ws>XXX:<diff:ws> </diff:ws>What<diff:ws> </diff:ws>happens<diff:ws> </diff:ws>if<diff:ws> </diff:ws>the<diff:ws> </diff:ws>shape<diff:ws> </diff:ws>is<diff:ws> </diff:ws>added<diff:ws> </diff:ws>embedded<diff:ws> </diff:ws>in<diff:ws> </diff:ws>another</comment><diff:ws>
        </diff:ws><comment type="line">//<diff:ws> </diff:ws>shape?</comment><diff:ws>
        </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><name>shapeLayer</name></expr>)</condition><then><diff:ws>
            </diff:ws><block type="pseudo"><expr_stmt><expr><call><name><name>shapeLayer</name><operator>-&gt;</operator><name>removeChild</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><diff:ws>
    </diff:ws>}</block></else></if></diff:delete><diff:insert><diff:ws>    </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><name>shapeSelection</name></expr>)</condition><then><diff:ws> </diff:ws><block>{<diff:ws>
        </diff:ws><expr_stmt><expr><call><name><name>shapeSelection</name><operator>-&gt;</operator><name>removeChild</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:ws>
    </diff:ws>}</block></then><diff:ws> </diff:ws><else>else<diff:ws> </diff:ws><block>{<diff:ws>
        </diff:ws><decl_stmt><decl><type><name>KisShapeLayer</name><diff:ws> </diff:ws><modifier>*</modifier></type><diff:ws> </diff:ws><name>shapeLayer</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><cast type="dynamic">dynamic_cast<argument_list type="generic">&lt;<argument><expr><name>KisShapeLayer</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>shape</name><operator>-&gt;</operator><name>parent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt><diff:ws>

        </diff:ws><comment type="line">//<diff:ws> </diff:ws>XXX:<diff:ws> </diff:ws>What<diff:ws> </diff:ws>happens<diff:ws> </diff:ws>if<diff:ws> </diff:ws>the<diff:ws> </diff:ws>shape<diff:ws> </diff:ws>is<diff:ws> </diff:ws>added<diff:ws> </diff:ws>embedded<diff:ws> </diff:ws>in<diff:ws> </diff:ws>another</comment><diff:ws>
        </diff:ws><comment type="line">//<diff:ws> </diff:ws>shape?</comment><diff:ws>
        </diff:ws><if>if<diff:ws> </diff:ws><condition>(<expr><name>shapeLayer</name></expr>)</condition><then><diff:ws>
            </diff:ws><block type="pseudo"><expr_stmt><expr><call><name><name>shapeLayer</name><operator>-&gt;</operator><name>removeChild</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><diff:ws>
    </diff:ws>}</block></else></if></diff:insert>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" filename="whitespace|whitespace">
  <diff:delete><diff:ws> </diff:ws></diff:delete><for>for <control>( <init><decl><type><name><name>Region</name><operator>::</operator><name>ConstIterator</name></name></type> <name>it</name><argument_list>( <argument><expr><call><name><name>selection</name><operator>-&gt;</operator><name>constBegin</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr> )</control>
  <diff:delete><diff:ws> </diff:ws></diff:delete><block>{
    <diff:delete><diff:ws> </diff:ws></diff:delete><decl_stmt><decl><type><specifier>const</specifier> <name>QRect</name></type> <name>range</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name>rect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<diff:delete><diff:ws>     </diff:ws><for>for<diff:ws> </diff:ws><control>(<diff:ws> </diff:ws><init><decl><type><name>int</name></type><diff:ws> </diff:ws><name>col</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>range</name><operator>.</operator><name>left</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><diff:ws> </diff:ws><condition><expr><name>col</name><diff:ws> </diff:ws><operator>&lt;=</operator><diff:ws> </diff:ws><call><name><name>range</name><operator>.</operator><name>right</name></name><argument_list>()</argument_list></call></expr>;</condition><diff:ws> </diff:ws><incr><expr><operator>++</operator><name>col</name></expr></incr><diff:ws> </diff:ws>)</control><diff:ws>
     </diff:ws><block>{<diff:ws>
   </diff:ws><diff:insert><diff:ws> 
</diff:ws></diff:insert><diff:common>    <for>for <control>(<diff:delete><diff:ws> </diff:ws></diff:delete><init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <diff:delete type="replace"><call><name><name>range</name><operator>.</operator><name>bottom</name></name><argument_list>()</argument_list></call></diff:delete><diff:insert type="replace"><name>bottom</name></diff:insert></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr><diff:delete><diff:ws> </diff:ws></diff:delete>)</control>
    <diff:delete><diff:ws>   </diff:ws></diff:delete><block>{
<diff:delete><diff:ws>
   </diff:ws></diff:delete>    }</block></for>
</diff:common><diff:ws>     </diff:ws>}</block></for><diff:ws>
 </diff:ws></diff:delete>  }</block></for>
</unit>

</unit>
