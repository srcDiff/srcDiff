<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:diff="http://www.sdml.info/srcDiff" language="C++" dir="if.multiple">

<unit filename="if.multiple|if.multiple"><diff:delete><if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
<diff:common><expr_stmt><expr><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name></expr>;</expr_stmt></diff:common>
}</block></then></if></diff:delete></unit>

<unit filename="if.multiple|if.multiple"><expr_stmt><expr><name>a</name></expr>;</expr_stmt>
<diff:delete><if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
<diff:common><expr_stmt><expr><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name></expr>;</expr_stmt></diff:common>
}</block></then></if></diff:delete></unit>

<unit filename="if.multiple|if.multiple">
<diff:delete><if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{

<diff:common>    <expr_stmt><expr><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name></expr>;</expr_stmt>
</diff:common>
}</block></then></if>

<if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
    
<diff:common>    <expr_stmt><expr><name>c</name></expr>;</expr_stmt>

</diff:common>}</block></then></if></diff:delete></unit>

<unit filename="if.multiple|if.multiple">
<diff:delete><if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
<diff:common>    <expr_stmt><expr><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt>
</diff:common><diff:insert>    <expr_stmt><expr><name>g</name></expr>;</expr_stmt>
</diff:insert><diff:common>    <while>while<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition> <block>{
    <expr_stmt><expr><name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name></expr>;</expr_stmt>
<diff:delete>    <expr_stmt><expr><name>g</name></expr>;</expr_stmt></diff:delete>
<diff:delete type="whitespace">
</diff:delete>    }</block></while>

</diff:common><comment type="line">// foobar</comment>
}</block></then> <else>else 
    <block type="pseudo"><expr_stmt><expr><name>h</name></expr>;</expr_stmt></block></else></if>
</diff:delete></unit>

<unit filename="if.multiple|if.multiple">
<diff:delete><if>if<condition>(<expr><lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
<diff:common><expr_stmt><expr><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c</name><argument_list>(<diff:delete><argument><expr><name>foo</name></expr></argument>, <argument><expr><name>bar</name></expr></argument></diff:delete>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name></expr>;</expr_stmt>
</diff:common>}</block></then></if>
</diff:delete></unit>

<unit filename="if.multiple|if.multiple">
<if>if<condition>(<expr><name>a</name> <op:operator>&amp;&amp;</op:operator> <name>b</name></expr>)</condition><then> <block>{

<diff:delete>    <expr_stmt><expr><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name></expr>;</expr_stmt>


</diff:delete>}</block></then></if><diff:delete type="whitespace">
</diff:delete></unit>

<unit filename="if.multiple|if.multiple">
<if>if<condition>(<expr><name>a</name> <op:operator>&amp;&amp;</op:operator> <name>b</name></expr>)</condition><then><diff:delete type="change"> <block>{

    <expr_stmt><expr><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name></expr>;</expr_stmt>


}</block></diff:delete><diff:insert type="change">
    <block type="pseudo"><empty_stmt>;</empty_stmt></block></diff:insert></then></if>
</unit>

</unit>
