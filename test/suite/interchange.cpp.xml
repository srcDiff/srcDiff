<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:diff="http://www.srcML.org/srcDiff" language="C++" url="interchange">

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><while>while<diff:common><condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></if></if_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><for>for<control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:delete>(</diff:delete><expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr><diff:delete type="replace">)</diff:delete><diff:insert type="replace">;</diff:insert></condition></diff:common><incr/>)</control><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></if></if_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><for>for<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><for>for<control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:delete>(</diff:delete><expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr><diff:delete type="replace">)</diff:delete><diff:insert type="replace">;</diff:insert></condition></diff:common><incr/>)</control><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></while></diff:delete><diff:delete><diff:ws>
 </diff:ws></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><for>for<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><diff:delete type="replace">;</diff:delete><diff:insert type="replace"><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></diff:insert></init><diff:delete><diff:ws> </diff:ws><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:delete>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><diff:delete type="replace">;</diff:delete><diff:insert type="replace"><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:insert></init><diff:delete><diff:ws> </diff:ws><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:delete>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><expr><name>a</name> <range>: <expr><name>b</name></expr></range></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><expr><name>a</name></expr><diff:delete type="replace"><operator>,</operator><diff:ws> </diff:ws><expr><name>b</name></expr></diff:delete><diff:insert type="replace">,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:insert></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete><diff:delete><diff:ws>
</diff:ws></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><if_stmt><if>if<diff:common><condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><if_stmt><if>if<diff:delete><control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:insert>(</diff:insert><expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr><diff:delete type="replace">;</diff:delete><diff:insert type="replace">)</diff:insert></condition></diff:common><incr/>)</control></diff:delete><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><while>while<diff:delete><control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:insert>(</diff:insert><expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr><diff:delete type="replace">;</diff:delete><diff:insert type="replace">)</diff:insert></condition></diff:common><incr/>)</control></diff:delete><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><diff:delete type="replace"><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></expr></diff:delete><diff:insert type="replace">;</diff:insert></init><diff:insert><diff:ws> </diff:ws><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:insert>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><diff:delete type="replace"><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:delete><diff:insert type="replace">;</diff:insert></init><diff:insert><diff:ws> </diff:ws><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:insert>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><expr><name>a</name> <range>: <expr><name>b</name></expr></range></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><expr><name>a</name><diff:insert><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:insert></expr><diff:delete>,<range><diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:delete></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><while>while<diff:common><condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">b</diff:delete><diff:insert type="replace">c</diff:insert></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><for>for<control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:delete>(</diff:delete><expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">b</diff:delete><diff:insert type="replace">c</diff:insert></name></expr><diff:delete type="replace">)</diff:delete><diff:insert type="replace">;</diff:insert></condition></diff:common><incr/>)</control><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><for>for<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><if_stmt><if>if<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></if></if_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><for>for<control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:delete>(</diff:delete><expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">b</diff:delete><diff:insert type="replace">c</diff:insert></name></expr><diff:delete type="replace">)</diff:delete><diff:insert type="replace">;</diff:insert></condition></diff:common><incr/>)</control><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><for>for<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><foreach>foreach<diff:delete type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:delete><diff:insert type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></init>)</control></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><diff:delete type="replace">;</diff:delete><diff:insert type="replace"><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></diff:insert></init> <diff:delete><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:delete>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><diff:delete type="replace">;</diff:delete><diff:insert type="replace"><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></diff:insert></init> <diff:delete><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:delete>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><expr><name>a</name> <range>: <expr><name><diff:delete type="replace">b</diff:delete><diff:insert type="replace">c</diff:insert></name></expr></range></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><foreach>foreach<diff:common><control>(<init><expr><name>a</name><diff:delete><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:delete></expr><diff:insert>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></diff:insert></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></foreach></diff:insert></for></diff:delete></unit>




<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><while>while<diff:insert type="convert"><if_stmt><if>if<diff:common><condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">c</diff:delete><diff:insert type="replace">b</diff:insert></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></while></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><if_stmt><if>if<diff:delete><control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:insert>(</diff:insert><expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">c</diff:delete><diff:insert type="replace">b</diff:insert></name></expr><diff:delete type="replace">;</diff:delete><diff:insert type="replace">)</diff:insert></condition></diff:common><incr/>)</control></diff:delete><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><if_stmt><if>if<diff:delete type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></if></if_stmt></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><while>while<diff:delete><control>(<init>;</init><diff:ws> </diff:ws><diff:common><condition><diff:insert>(</diff:insert><expr><name>a</name> <operator>&amp;&amp;</operator> <name><diff:delete type="replace">c</diff:delete><diff:insert type="replace">b</diff:insert></name></expr><diff:delete type="replace">;</diff:delete><diff:insert type="replace">)</diff:insert></condition></diff:common><incr/>)</control></diff:delete><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><for>for<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></for></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name><diff:ws> </diff:ws><range>:<diff:ws> </diff:ws><expr><name>c</name></expr></range></expr></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><while>while<diff:delete type="replace"><control>(<init><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></init>)</control></diff:delete><diff:insert type="replace"><condition>(<expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>)</condition></diff:insert><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></while></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><diff:delete type="replace"><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></diff:delete><diff:insert type="replace">;</diff:insert></init><diff:insert><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:insert>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><diff:delete type="replace"><expr><name>a</name></expr>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></diff:delete><diff:insert type="replace">;</diff:insert></init><diff:insert><condition><expr><name>a</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><name>b</name></expr>;</condition><incr/></diff:insert>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><expr><name>a</name> <range>: <expr><name><diff:delete type="replace">c</diff:delete><diff:insert type="replace">b</diff:insert></name></expr></range></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><expr><name>a</name><diff:insert><range>:<diff:ws> </diff:ws><expr><name>b</name></expr></range></diff:insert></expr><diff:delete>,<range><diff:ws> </diff:ws><expr><name>c</name></expr></range></diff:delete></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt></block_content></block></diff:common></for></diff:insert></foreach></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<if_stmt><diff:delete type="convert"><else><diff:insert type="convert"><if type="elseif"><diff:common>else</diff:common><diff:ws> </diff:ws>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></if></diff:insert></else></diff:delete></if_stmt></unit>

<unit language="C++" filename="interchange|interchange">
<if_stmt><diff:delete type="convert"><if type="elseif"><diff:insert type="convert"><else><diff:common>else</diff:common><diff:delete><diff:ws> </diff:ws>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><diff:common><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block_content></block></diff:common></diff:delete></else></diff:insert></if></diff:delete></if_stmt></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><foreach>foreach<diff:insert type="convert"><for>for<diff:common><control>(<init><diff:delete type="replace"><decl><type><name><name>KoViewPrivate</name><operator>::</operator><name>StatusBarItem</name></name></type><diff:ws> </diff:ws><name>sbItem</name>,<range><diff:ws> </diff:ws><expr><name><name>d</name><operator>-&gt;</operator><name>statusBarItems</name></name></expr></range></decl></diff:delete><diff:insert type="replace"><decl><type><name>int</name></type><diff:ws> </diff:ws><name>i</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><literal type="number">0</literal></expr></init></decl>;</diff:insert></init><diff:insert><diff:ws> </diff:ws><condition><expr><name>i</name><diff:ws> </diff:ws><operator>&lt;</operator><diff:ws> </diff:ws><name>itemCount</name></expr>;</condition><diff:ws> </diff:ws><incr><expr><operator>++</operator><name>i</name></expr></incr></diff:insert>)</control> <block>{<block_content>
<diff:insert><diff:ws>    </diff:ws><decl_stmt><decl><type><name><name>KoViewPrivate</name><operator>::</operator><name>StatusBarItem</name></name><diff:ws> </diff:ws><modifier>&amp;</modifier></type><name>sbItem</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><name><name>d</name><operator>-&gt;</operator><name>statusBarItems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt><diff:ws>
</diff:ws></diff:insert>    <if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition><diff:insert><diff:ws> </diff:ws></diff:insert><block type="pseudo|"><diff:insert>{</diff:insert><block_content>
        <expr_stmt><expr><call><name><name>sbItem</name><operator>.</operator><name>ensureItemShown</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:insert><diff:ws>
    </diff:ws></diff:insert></block_content><diff:insert>}</diff:insert></block></if><diff:delete><diff:ws>
   </diff:ws></diff:delete> <else>else<diff:insert><diff:ws> </diff:ws></diff:insert><block type="pseudo|"><diff:insert>{</diff:insert><block_content>
        <expr_stmt><expr><call><name><name>sbItem</name><operator>.</operator><name>ensureItemHidden</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:insert><diff:ws>
    </diff:ws></diff:insert></block_content><diff:insert>}</diff:insert></block></else></if_stmt>
</block_content>}</block></diff:common></for></diff:insert></foreach></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<if_stmt><if>if <condition>(<expr><name>paragraphStyle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>paragStyleClone</name> <operator>=</operator> <call><name><name>paragraphStyle</name><operator>-&gt;</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ParagraphGeneral</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>new</operator> <name>ParagraphGeneral</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>setParagraphStyles</name></name><argument_list>(<argument><expr><call><name><name>m_styleManager</name><operator>-&gt;</operator><name>paragraphStyles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>setStyle</name></name><argument_list>(<argument><expr><name>paragraphStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>SIGNAL</name><argument_list>(<argument><expr><call><name>styleAltered</name><argument_list>(<argument><expr><specifier>const</specifier> <name>KoParagraphStyle</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>m_styleManager</name></expr></argument>, <argument><expr><call><name>SLOT</name><argument_list>(<argument><expr><call><name>alteredStyle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>KoParagraphStyle</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO get KoUnit from somewhere and set that on p</comment>
    <expr_stmt><expr><name>widget</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <diff:delete type="convert"><if type="elseif"><diff:insert type="convert"><else><diff:common>else </diff:common><block>{<block_content><diff:ws>
    </diff:ws><decl_stmt><decl><type><name>KoCharacterStyle</name><diff:ws> </diff:ws><modifier>*</modifier></type><name>characterStyle</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>m_stylesModel</name><operator>-&gt;</operator><name>characterStyleForIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><diff:ws>
    </diff:ws><if_stmt><if><diff:common>if <condition>(<expr><name>characterStyle</name></expr>)</condition> <block>{<block_content>
<diff:delete><diff:ws>    </diff:ws><expr_stmt><expr><name>characStyleClone</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws><call><name><name>characterStyle</name><operator>-&gt;</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><diff:ws>
</diff:ws></diff:delete><diff:insert><diff:ws>    </diff:ws></diff:insert>    <decl_stmt><decl><type><name>CharacterGeneral</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>new</operator> <name>CharacterGeneral</name></expr></init></decl>;</decl_stmt>
    <diff:insert><diff:ws>    </diff:ws></diff:insert><expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>setStyle</name></name><argument_list>(<argument><expr><name>characterStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:insert><diff:ws>        </diff:ws><expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name>SIGNAL</name><argument_list>(<argument><expr><call><name>styleAltered</name><argument_list>(<argument><expr><specifier>const</specifier><diff:ws> </diff:ws><name>KoCharacterStyle</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<diff:ws>
                </diff:ws><argument><expr><name>m_styleManager</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><call><name>SLOT</name><argument_list>(<argument><expr><call><name>alteredStyle</name><argument_list>(<argument><expr><specifier>const</specifier><diff:ws> </diff:ws><name>KoCharacterStyle</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><diff:ws>
    </diff:ws></diff:insert>    <expr_stmt><expr><name>widget</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<diff:insert><diff:ws>    </diff:ws></diff:insert></block_content>}</block></diff:common></if></if_stmt><diff:ws>
</diff:ws></block_content>}</block></else></diff:insert></if></diff:delete></if_stmt>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><class>class<diff:insert type="convert"><struct>struct<diff:common> <name>foo</name> <block>{<diff:delete type="convert"><private type="default"><diff:insert type="convert"><public type="default"/></diff:insert></private></diff:delete>}</block>;</diff:common></struct></diff:insert></class></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><struct>struct<diff:insert type="convert"><class>class<diff:common> <name>A</name> <block>{<diff:insert><private type="default"><diff:ws>

</diff:ws></private></diff:insert><public type="default|"><diff:insert>public:</diff:insert>

<function><type><name><diff:delete type="replace">void</diff:delete><diff:insert type="replace">int</diff:insert></name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><diff:delete type="replace">b</diff:delete><diff:insert type="replace">c</diff:insert></name></decl></parameter><diff:insert>,<diff:ws> </diff:ws><parameter><decl><type><name>int</name></type><diff:ws> </diff:ws><name>d</name></decl></parameter></diff:insert>)</parameter_list> <block>{<block_content>

<diff:insert><diff:ws>	</diff:ws><if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><diff:ws>
		</diff:ws><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt></diff:insert>

</block_content>}</block></function>

<diff:insert><function><type><name>void</name></type><diff:ws> </diff:ws><name>g</name><parameter_list>()</parameter_list><diff:ws> </diff:ws><block>{<block_content/>}</block></function><diff:ws>

</diff:ws></diff:insert></public>}</block>;</diff:common></class></diff:insert></struct></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:delete><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:delete><name>b</name> <operator>+</operator> <name>c</name></expr></diff:common></init></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:insert><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:insert><name>b</name> <operator>+</operator> <name>c</name></expr></diff:common></init></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><call><name>b</name><argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr></diff:common></init></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><call><name>b</name><argument_list>(<argument><expr><name>foo</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr></diff:common></init></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><return>return<diff:ws> </diff:ws><diff:common><expr><diff:delete><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:delete><name>b</name> <operator>+</operator> <name>c</name></expr>;</diff:common></return></diff:insert></expr_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><return>return<diff:insert type="convert"><expr_stmt><diff:delete><diff:ws> </diff:ws></diff:delete><diff:common><expr><diff:delete><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:delete><name>b</name> <operator>+</operator> <name>c</name></expr>;</diff:common></expr_stmt></diff:insert></return></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:delete><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:delete><name>b</name></expr></diff:common></init></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:insert><name>a</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:insert><name>b</name></expr></diff:common></init></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><name>b</name></expr></diff:common></init></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><name>b</name></expr></diff:common></init></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>
</unit>

<unit language="C++" filename="interchange|interchange">
<function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{<block_content>
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>c</name><argument_list>(<argument><diff:common><expr><diff:delete><name>c</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:delete><name>d</name></expr></diff:common></argument>)</argument_list></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="interchange|interchange">
<function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{<block_content>
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>c</name><argument_list>(<argument><diff:common><expr><diff:insert><name>c</name><diff:ws> </diff:ws><operator>=</operator><diff:ws> </diff:ws></diff:insert><name>d</name></expr></diff:common></argument>)</argument_list></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="interchange|interchange">
<function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list><block>{<block_content>

	<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<diff:ws> </diff:ws><argument><diff:common><expr><name>b</name></expr></diff:common></argument>)</argument_list></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete>

</block_content>}</block></function>
</unit>

<unit language="C++" filename="interchange|interchange">
<function><type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list><block>{<block_content>

	<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>int</name></type><diff:ws> </diff:ws><name>a</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<diff:ws> </diff:ws><argument><diff:common><expr><name>b</name></expr></diff:common></argument>)</argument_list></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete>

</block_content>}</block></function>
</unit>

<unit language="C++" filename="interchange|interchange"><function><type><name>QRectF</name></type> <name><name>ParagraphEditor</name><operator>::</operator><name>dirtyRectangle</name></name><parameter_list>(<diff:insert><parameter><decl><type><name>bool</name></type><diff:ws> </diff:ws><name>updateWholeRegion</name></decl></parameter></diff:insert>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<diff:insert><diff:ws> </diff:ws></diff:insert><expr><operator>!</operator><diff:insert><name>updateWholeRegion</name><diff:ws> </diff:ws><operator>&amp;&amp;</operator><diff:ws> </diff:ws><operator>!</operator></diff:insert><call><name>needsRepaint</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
       <diff:delete><diff:ws> </diff:ws><diff:delete type="convert"><expr_stmt><diff:insert type="convert"><return>return<diff:ws> </diff:ws><diff:common><expr><call><name>QRectF</name><argument_list>()</argument_list></call></expr>;</diff:common></return></diff:insert></expr_stmt></diff:delete></diff:delete>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>repaintRectangle</name></expr>;</return>
</block_content>}</block></function>
</unit>

<unit language="C++" filename="interchange|interchange">
<expr_stmt><expr><cast type="dynamic|reinterpret"><diff:delete type="replace">dynamic_cast</diff:delete><diff:insert type="replace">reinterpret_cast</diff:insert><argument_list type="generic">&lt;<argument><expr><name>foo</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
</unit>

<unit language="C++" filename="interchange|interchange">
<expr_stmt><expr><cast type="reinterpret|dynamic"><diff:delete type="replace">reinterpret_cast</diff:delete><diff:insert type="replace">dynamic_cast</diff:insert><argument_list type="generic">&lt;<argument><expr><name>foo</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="replace"><decl_stmt><decl><type><name>String</name></type><diff:ws> </diff:ws><name>redirectPath</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><expr><call><name><name>rmWebApp</name><operator>.</operator><name>getRedirectPath</name></name><argument_list>()</argument_list></call><diff:ws> </diff:ws><operator>+</operator><diff:ws> </diff:ws><name>uri</name></expr></init></decl>;</decl_stmt></diff:delete><diff:insert type="replace"><return>return;</return></diff:insert>
</unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><decl_stmt><diff:insert type="convert"><expr_stmt><diff:delete><decl><type><name>foo</name></type><diff:ws> </diff:ws><name>bar</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:delete><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator></diff:delete><call><diff:insert><name><name>bar</name><operator>.</operator><diff:common><name>call</name></diff:common></name></diff:insert><argument_list>(<argument><expr><name>foobar</name></expr></argument>)</argument_list></call></expr></diff:common></init></decl></diff:delete><diff:common>;</diff:common></expr_stmt></diff:insert></decl_stmt></diff:delete></unit>

<unit language="C++" filename="interchange|interchange">
<diff:delete type="convert"><expr_stmt><diff:insert type="convert"><decl_stmt><decl><type><name>foo</name></type><diff:ws> </diff:ws><name>bar</name><diff:ws> </diff:ws><init>=<diff:ws> </diff:ws><diff:common><expr><diff:insert><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator></diff:insert><call><diff:delete><name><name>bar</name><operator>.</operator><diff:common><name>call</name></diff:common></name></diff:delete><argument_list>(<argument><expr><name>foobar</name></expr></argument>)</argument_list></call></expr></diff:common></init></decl><diff:common>;</diff:common></decl_stmt></diff:insert></expr_stmt></diff:delete></unit>

<!-- This could be better with decl_stmt matching -->
<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" filename="interchange|interchange">
<diff:delete type="convert"><struct>struct<diff:insert type="convert"><class>class<diff:common> <name>function_profile_t</name> <super_list>: <super><specifier>public</specifier> <name>profile_t</name></super></super_list> <block>{<diff:delete type="convert"><public type="default"><diff:insert type="convert"><private type="default"><diff:common>

    </diff:common></private></diff:insert></public></diff:delete><private>private:

    </private><public>public:

        <decl_stmt><decl><type><name>versioned_string</name></type> <name>return_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>versioned_string</name></type> <name>name</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><diff:delete><name><name>std</name><operator>::</operator><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>srcdiff_type</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><diff:common><name><name><diff:delete type="replace">std</diff:delete><diff:insert type="replace">change_entity_map</diff:insert></name><diff:delete><operator>::</operator><name>shared_ptr</name></diff:delete><argument_list type="generic">&lt;<argument><expr><name>parameter_profile_t</name></expr></argument>&gt;</argument_list></name></diff:common></expr></argument>&gt;</argument_list></name></diff:delete></type> <name>parameters</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><diff:delete><name><name>std</name><operator>::</operator><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>srcdiff_type</name></expr></argument>,<diff:ws> </diff:ws><argument><expr><diff:common><name><name><diff:delete type="replace">std</diff:delete><diff:insert type="replace">change_entity_map</diff:insert></name><diff:delete><operator>::</operator><name>shared_ptr</name></diff:delete><argument_list type="generic">&lt;<argument><expr><name>profile_t</name></expr></argument>&gt;</argument_list></name></diff:common></expr></argument>&gt;</argument_list></name></diff:delete></type> <diff:insert><diff:ws>          </diff:ws></diff:insert><name>conditionals</name></decl>;</decl_stmt>

        <constructor><name>function_profile_t</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>type_name</name></decl></parameter>, <parameter><decl><type><name>srcdiff_type</name></type> <name>operation</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>profile_t</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

</public>}</block>;</diff:common></class></diff:insert></struct></diff:delete>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></unit>

</unit>
