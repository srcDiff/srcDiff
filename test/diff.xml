<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:diff="http://www.sdml.info/srcDiff" language="C" filename="old/./drivers/gpu/drm/radeon/ni.c|new/./drivers/gpu/drm/radeon/ni.c"><comment type="block">/*
 * Copyright 2010 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors: Alex Deucher
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/firmware.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/platform_device.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/slab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"drmP.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"radeon.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"radeon_asic.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"radeon_drm.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"nid.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"atom.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"ni_reg.h"</lit:literal></cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file><lit:literal type="string">"cayman_blit_shaders.h"</lit:literal></cpp:file></cpp:include>

<function_decl><type><name>extern</name> <name>void</name></type> <name>evergreen_mc_stop</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>, <param><decl><type>struct <name>evergreen_mc_save</name> <type:modifier>*</type:modifier></type><name>save</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>extern</name> <name>void</name></type> <name>evergreen_mc_resume</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>, <param><decl><type>struct <name>evergreen_mc_save</name> <type:modifier>*</type:modifier></type><name>save</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>extern</name> <name>int</name></type> <name>evergreen_mc_wait_for_idle</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>extern</name> <name>void</name></type> <name>evergreen_mc_program</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>extern</name> <name>void</name></type> <name>evergreen_irq_suspend</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>extern</name> <name>int</name></type> <name>evergreen_mc_init</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>;</function_decl>
<diff:insert><function_decl><type><name>extern</name> <name>void</name></type> <name>evergreen_fix_pci_max_read_req_size</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>;</function_decl>
</diff:insert>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>EVERGREEN_PFP_UCODE_SIZE</name> 1120</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>EVERGREEN_PM4_UCODE_SIZE</name> 1376</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>EVERGREEN_RLC_UCODE_SIZE</name> 768</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTC_MC_UCODE_SIZE</name> 6024</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>CAYMAN_PFP_UCODE_SIZE</name> 2176</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CAYMAN_PM4_UCODE_SIZE</name> 2176</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CAYMAN_RLC_UCODE_SIZE</name> 1024</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CAYMAN_MC_UCODE_SIZE</name> 6037</cpp:define>

<comment type="block">/* Firmware Names */</comment>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/BARTS_pfp.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/BARTS_me.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/BARTS_mc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/BTC_rlc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/TURKS_pfp.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/TURKS_me.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/TURKS_mc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAICOS_pfp.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAICOS_me.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAICOS_mc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAYMAN_pfp.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAYMAN_me.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAYMAN_mc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MODULE_FIRMWARE</name><argument_list>(<argument><expr><lit:literal type="string">"radeon/CAYMAN_rlc.bin"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTC_IO_MC_REGS_SIZE</name> 29</cpp:define>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>u32</name></type> <name><name>barts_io_mc_regs</name><index>[<expr><name>BTC_IO_MC_REGS_SIZE</name></expr>]</index><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> =<init> <expr><block>{
	<expr><block>{<expr><lit:literal type="number">0x00000077</lit:literal></expr>, <expr><lit:literal type="number">0xff010100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000078</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000079</lit:literal></expr>, <expr><lit:literal type="number">0x00001434</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007a</lit:literal></expr>, <expr><lit:literal type="number">0xcc08ec08</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007b</lit:literal></expr>, <expr><lit:literal type="number">0x00040000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007c</lit:literal></expr>, <expr><lit:literal type="number">0x000080c0</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007d</lit:literal></expr>, <expr><lit:literal type="number">0x09000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007e</lit:literal></expr>, <expr><lit:literal type="number">0x00210404</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000081</lit:literal></expr>, <expr><lit:literal type="number">0x08a8e800</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000082</lit:literal></expr>, <expr><lit:literal type="number">0x00030444</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000083</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000085</lit:literal></expr>, <expr><lit:literal type="number">0x00000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000086</lit:literal></expr>, <expr><lit:literal type="number">0x00000002</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000087</lit:literal></expr>, <expr><lit:literal type="number">0x48490000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000088</lit:literal></expr>, <expr><lit:literal type="number">0x20244647</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000089</lit:literal></expr>, <expr><lit:literal type="number">0x00000005</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008b</lit:literal></expr>, <expr><lit:literal type="number">0x66030000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008c</lit:literal></expr>, <expr><lit:literal type="number">0x00006603</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008d</lit:literal></expr>, <expr><lit:literal type="number">0x00000100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008f</lit:literal></expr>, <expr><lit:literal type="number">0x00001c0a</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000090</lit:literal></expr>, <expr><lit:literal type="number">0xff000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000094</lit:literal></expr>, <expr><lit:literal type="number">0x00101101</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000095</lit:literal></expr>, <expr><lit:literal type="number">0x00000fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000096</lit:literal></expr>, <expr><lit:literal type="number">0x00116fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000097</lit:literal></expr>, <expr><lit:literal type="number">0x60010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000098</lit:literal></expr>, <expr><lit:literal type="number">0x10010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000099</lit:literal></expr>, <expr><lit:literal type="number">0x00006000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009a</lit:literal></expr>, <expr><lit:literal type="number">0x00001000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009f</lit:literal></expr>, <expr><lit:literal type="number">0x00946a00</lit:literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>u32</name></type> <name><name>turks_io_mc_regs</name><index>[<expr><name>BTC_IO_MC_REGS_SIZE</name></expr>]</index><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> =<init> <expr><block>{
	<expr><block>{<expr><lit:literal type="number">0x00000077</lit:literal></expr>, <expr><lit:literal type="number">0xff010100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000078</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000079</lit:literal></expr>, <expr><lit:literal type="number">0x00001434</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007a</lit:literal></expr>, <expr><lit:literal type="number">0xcc08ec08</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007b</lit:literal></expr>, <expr><lit:literal type="number">0x00040000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007c</lit:literal></expr>, <expr><lit:literal type="number">0x000080c0</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007d</lit:literal></expr>, <expr><lit:literal type="number">0x09000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007e</lit:literal></expr>, <expr><lit:literal type="number">0x00210404</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000081</lit:literal></expr>, <expr><lit:literal type="number">0x08a8e800</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000082</lit:literal></expr>, <expr><lit:literal type="number">0x00030444</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000083</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000085</lit:literal></expr>, <expr><lit:literal type="number">0x00000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000086</lit:literal></expr>, <expr><lit:literal type="number">0x00000002</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000087</lit:literal></expr>, <expr><lit:literal type="number">0x48490000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000088</lit:literal></expr>, <expr><lit:literal type="number">0x20244647</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000089</lit:literal></expr>, <expr><lit:literal type="number">0x00000005</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008b</lit:literal></expr>, <expr><lit:literal type="number">0x66030000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008c</lit:literal></expr>, <expr><lit:literal type="number">0x00006603</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008d</lit:literal></expr>, <expr><lit:literal type="number">0x00000100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008f</lit:literal></expr>, <expr><lit:literal type="number">0x00001c0a</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000090</lit:literal></expr>, <expr><lit:literal type="number">0xff000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000094</lit:literal></expr>, <expr><lit:literal type="number">0x00101101</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000095</lit:literal></expr>, <expr><lit:literal type="number">0x00000fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000096</lit:literal></expr>, <expr><lit:literal type="number">0x00116fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000097</lit:literal></expr>, <expr><lit:literal type="number">0x60010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000098</lit:literal></expr>, <expr><lit:literal type="number">0x10010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000099</lit:literal></expr>, <expr><lit:literal type="number">0x00006000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009a</lit:literal></expr>, <expr><lit:literal type="number">0x00001000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009f</lit:literal></expr>, <expr><lit:literal type="number">0x00936a00</lit:literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>u32</name></type> <name><name>caicos_io_mc_regs</name><index>[<expr><name>BTC_IO_MC_REGS_SIZE</name></expr>]</index><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> =<init> <expr><block>{
	<expr><block>{<expr><lit:literal type="number">0x00000077</lit:literal></expr>, <expr><lit:literal type="number">0xff010100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000078</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000079</lit:literal></expr>, <expr><lit:literal type="number">0x00001434</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007a</lit:literal></expr>, <expr><lit:literal type="number">0xcc08ec08</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007b</lit:literal></expr>, <expr><lit:literal type="number">0x00040000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007c</lit:literal></expr>, <expr><lit:literal type="number">0x000080c0</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007d</lit:literal></expr>, <expr><lit:literal type="number">0x09000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007e</lit:literal></expr>, <expr><lit:literal type="number">0x00210404</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000081</lit:literal></expr>, <expr><lit:literal type="number">0x08a8e800</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000082</lit:literal></expr>, <expr><lit:literal type="number">0x00030444</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000083</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000085</lit:literal></expr>, <expr><lit:literal type="number">0x00000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000086</lit:literal></expr>, <expr><lit:literal type="number">0x00000002</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000087</lit:literal></expr>, <expr><lit:literal type="number">0x48490000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000088</lit:literal></expr>, <expr><lit:literal type="number">0x20244647</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000089</lit:literal></expr>, <expr><lit:literal type="number">0x00000005</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008b</lit:literal></expr>, <expr><lit:literal type="number">0x66030000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008c</lit:literal></expr>, <expr><lit:literal type="number">0x00006603</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008d</lit:literal></expr>, <expr><lit:literal type="number">0x00000100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008f</lit:literal></expr>, <expr><lit:literal type="number">0x00001c0a</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000090</lit:literal></expr>, <expr><lit:literal type="number">0xff000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000094</lit:literal></expr>, <expr><lit:literal type="number">0x00101101</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000095</lit:literal></expr>, <expr><lit:literal type="number">0x00000fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000096</lit:literal></expr>, <expr><lit:literal type="number">0x00116fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000097</lit:literal></expr>, <expr><lit:literal type="number">0x60010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000098</lit:literal></expr>, <expr><lit:literal type="number">0x10010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000099</lit:literal></expr>, <expr><lit:literal type="number">0x00006000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009a</lit:literal></expr>, <expr><lit:literal type="number">0x00001000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009f</lit:literal></expr>, <expr><lit:literal type="number">0x00916a00</lit:literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>u32</name></type> <name><name>cayman_io_mc_regs</name><index>[<expr><name>BTC_IO_MC_REGS_SIZE</name></expr>]</index><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> =<init> <expr><block>{
	<expr><block>{<expr><lit:literal type="number">0x00000077</lit:literal></expr>, <expr><lit:literal type="number">0xff010100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000078</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000079</lit:literal></expr>, <expr><lit:literal type="number">0x00001434</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007a</lit:literal></expr>, <expr><lit:literal type="number">0xcc08ec08</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007b</lit:literal></expr>, <expr><lit:literal type="number">0x00040000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007c</lit:literal></expr>, <expr><lit:literal type="number">0x000080c0</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007d</lit:literal></expr>, <expr><lit:literal type="number">0x09000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000007e</lit:literal></expr>, <expr><lit:literal type="number">0x00210404</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000081</lit:literal></expr>, <expr><lit:literal type="number">0x08a8e800</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000082</lit:literal></expr>, <expr><lit:literal type="number">0x00030444</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000083</lit:literal></expr>, <expr><lit:literal type="number">0x00000000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000085</lit:literal></expr>, <expr><lit:literal type="number">0x00000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000086</lit:literal></expr>, <expr><lit:literal type="number">0x00000002</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000087</lit:literal></expr>, <expr><lit:literal type="number">0x48490000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000088</lit:literal></expr>, <expr><lit:literal type="number">0x20244647</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000089</lit:literal></expr>, <expr><lit:literal type="number">0x00000005</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008b</lit:literal></expr>, <expr><lit:literal type="number">0x66030000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008c</lit:literal></expr>, <expr><lit:literal type="number">0x00006603</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008d</lit:literal></expr>, <expr><lit:literal type="number">0x00000100</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000008f</lit:literal></expr>, <expr><lit:literal type="number">0x00001c0a</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000090</lit:literal></expr>, <expr><lit:literal type="number">0xff000001</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000094</lit:literal></expr>, <expr><lit:literal type="number">0x00101101</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000095</lit:literal></expr>, <expr><lit:literal type="number">0x00000fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000096</lit:literal></expr>, <expr><lit:literal type="number">0x00116fff</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000097</lit:literal></expr>, <expr><lit:literal type="number">0x60010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000098</lit:literal></expr>, <expr><lit:literal type="number">0x10010000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x00000099</lit:literal></expr>, <expr><lit:literal type="number">0x00006000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009a</lit:literal></expr>, <expr><lit:literal type="number">0x00001000</lit:literal></expr>}</block></expr>,
	<expr><block>{<expr><lit:literal type="number">0x0000009f</lit:literal></expr>, <expr><lit:literal type="number">0x00976b00</lit:literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ni_mc_load_microcode</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>const</name> <name>__be32</name> <type:modifier>*</type:modifier></type><name>fw_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>mem_type</name>, <name>running</name>, <name>blackout</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name> <type:modifier>*</type:modifier></type><name>io_mc_regs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>ucode_size</name>, <name>regs_size</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name></expr>)</condition><then>
		<return>return <expr><op:operator>-</op:operator><name>EINVAL</name></expr>;</return></then></if>

	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>family</name></expr>)</condition> <block>{
	<case>case <expr><name>CHIP_BARTS</name></expr>:
		<expr_stmt><expr><name>io_mc_regs</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>u32</name> <op:operator>*</op:operator><op:operator>)</op:operator><op:operator>&amp;</op:operator><name>barts_io_mc_regs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucode_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regs_size</name> <op:operator>=</op:operator> <name>BTC_IO_MC_REGS_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>CHIP_TURKS</name></expr>:
		<expr_stmt><expr><name>io_mc_regs</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>u32</name> <op:operator>*</op:operator><op:operator>)</op:operator><op:operator>&amp;</op:operator><name>turks_io_mc_regs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucode_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regs_size</name> <op:operator>=</op:operator> <name>BTC_IO_MC_REGS_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>CHIP_CAICOS</name></expr>:
	</case><default>default:
		<expr_stmt><expr><name>io_mc_regs</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>u32</name> <op:operator>*</op:operator><op:operator>)</op:operator><op:operator>&amp;</op:operator><name>caicos_io_mc_regs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucode_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regs_size</name> <op:operator>=</op:operator> <name>BTC_IO_MC_REGS_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><name>CHIP_CAYMAN</name></expr>:
		<expr_stmt><expr><name>io_mc_regs</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>u32</name> <op:operator>*</op:operator><op:operator>)</op:operator><op:operator>&amp;</op:operator><name>cayman_io_mc_regs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ucode_size</name> <op:operator>=</op:operator> <name>CAYMAN_MC_UCODE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regs_size</name> <op:operator>=</op:operator> <name>BTC_IO_MC_REGS_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>

	<expr_stmt><expr><name>mem_type</name> <op:operator>=</op:operator> <op:operator>(</op:operator><call><name>RREG32</name><argument_list>(<argument><expr><name>MC_SEQ_MISC0</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <name>MC_SEQ_MISC0_GDDR5_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>MC_SEQ_MISC0_GDDR5_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>running</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <name>RUN_MASK</name></expr>;</expr_stmt>

	<if>if <condition>(<expr><op:operator>(</op:operator><name>mem_type</name> <op:operator>==</op:operator> <name>MC_SEQ_MISC0_GDDR5_VALUE</name><op:operator>)</op:operator> <op:operator>&amp;&amp;</op:operator> <op:operator>(</op:operator><name>running</name> <op:operator>==</op:operator> <lit:literal type="number">0</lit:literal><op:operator>)</op:operator></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>running</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>blackout</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>MC_SHARED_BLACKOUT_CNTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SHARED_BLACKOUT_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="block">/* reset the engine and set to writable */</comment>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000008</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000010</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* load mc io regs */</comment>
		<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>regs_size</name></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group> <block>{
			<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_IO_DEBUG_INDEX</name></expr></argument>, <argument><expr><name><name>io_mc_regs</name><index>[<expr><op:operator>(</op:operator><name>i</name> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_IO_DEBUG_DATA</name></expr></argument>, <argument><expr><name><name>io_mc_regs</name><index>[<expr><op:operator>(</op:operator><name>i</name> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<comment type="block">/* load the MC ucode */</comment>
		<expr_stmt><expr><name>fw_data</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>const</name> <name>__be32</name> <op:operator>*</op:operator><op:operator>)</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name><op:operator>-&gt;</op:operator><name>data</name></expr>;</expr_stmt>
		<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>ucode_size</name></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group>
			<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_PGM</name></expr></argument>, <argument><expr><call><name>be32_to_cpup</name><argument_list>(<argument><expr><name>fw_data</name><op:operator>++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

		<comment type="block">/* put the engine back into the active state */</comment>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000008</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000004</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SEQ_SUP_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000001</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* wait for training to complete */</comment>
		<while>while <condition>(<expr><op:operator>!</op:operator><op:operator>(</op:operator><call><name>RREG32</name><argument_list>(<argument><expr><name>MC_IO_PAD_CNTL_D0</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <name>MEM_FALL_OUT_CMD</name><op:operator>)</op:operator></expr>)</condition>
			<expr_stmt><expr><call><name>udelay</name><argument_list>(<argument><expr><lit:literal type="number">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

		<if>if <condition>(<expr><name>running</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SHARED_BLACKOUT_CNTL</name></expr></argument>, <argument><expr><name>blackout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>

	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ni_init_microcode</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type>struct <name>platform_device</name> <type:modifier>*</type:modifier></type><name>pdev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>const</name> <name>char</name> <type:modifier>*</type:modifier></type><name>chip_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>const</name> <name>char</name> <type:modifier>*</type:modifier></type><name>rlc_chip_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pfp_req_size</name>, <name>me_req_size</name>, <name>rlc_req_size</name>, <name>mc_req_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fw_name</name><index>[<expr><lit:literal type="number">30</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>DRM_DEBUG</name><argument_list>(<argument><expr><lit:literal type="string">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pdev</name> <op:operator>=</op:operator> <call><name>platform_device_register_simple</name><argument_list>(<argument><expr><lit:literal type="string">"radeon_cp"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <call><name>IS_ERR</name><argument_list>(<argument><expr><name>pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name> <lit:literal type="string">"radeon_cp: Failed to register firmware\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><op:operator>-</op:operator><name>EINVAL</name></expr>;</return>
	}</block></then></if>

	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>family</name></expr>)</condition> <block>{
	<case>case <expr><name>CHIP_BARTS</name></expr>:
		<expr_stmt><expr><name>chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"BARTS"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"BTC"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pfp_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PFP_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>me_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PM4_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_RLC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mc_req_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>CHIP_TURKS</name></expr>:
		<expr_stmt><expr><name>chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"TURKS"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"BTC"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pfp_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PFP_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>me_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PM4_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_RLC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mc_req_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>CHIP_CAICOS</name></expr>:
		<expr_stmt><expr><name>chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"CAICOS"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"BTC"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pfp_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PFP_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>me_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_PM4_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_req_size</name> <op:operator>=</op:operator> <name>EVERGREEN_RLC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mc_req_size</name> <op:operator>=</op:operator> <name>BTC_MC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><name>CHIP_CAYMAN</name></expr>:
		<expr_stmt><expr><name>chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"CAYMAN"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_chip_name</name> <op:operator>=</op:operator> <lit:literal type="string">"CAYMAN"</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pfp_req_size</name> <op:operator>=</op:operator> <name>CAYMAN_PFP_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>me_req_size</name> <op:operator>=</op:operator> <name>CAYMAN_PM4_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rlc_req_size</name> <op:operator>=</op:operator> <name>CAYMAN_RLC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mc_req_size</name> <op:operator>=</op:operator> <name>CAYMAN_MC_UCODE_SIZE</name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</case><default>default: <expr_stmt><expr><call><name>BUG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>

	<expr_stmt><expr><call><name>DRM_INFO</name><argument_list>(<argument><expr><lit:literal type="string">"Loading %s Microcode\n"</lit:literal></expr></argument>, <argument><expr><name>chip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string">"radeon/%s_pfp.bin"</lit:literal></expr></argument>, <argument><expr><name>chip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <call><name>request_firmware</name><argument_list>(<argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>pdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
		<goto>goto <name>out</name>;</goto></then></if>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name><op:operator>-&gt;</op:operator><name>size</name> <op:operator>!=</op:operator> <name>pfp_req_size</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name>
		       <lit:literal type="string">"ni_cp: Bogus length %zu in firmware \"%s\"\n"</lit:literal></expr></argument>,
		       <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name><op:operator>-&gt;</op:operator><name>size</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <op:operator>-</op:operator><name>EINVAL</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	}</block></then></if>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string">"radeon/%s_me.bin"</lit:literal></expr></argument>, <argument><expr><name>chip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <call><name>request_firmware</name><argument_list>(<argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>pdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
		<goto>goto <name>out</name>;</goto></then></if>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name><op:operator>-&gt;</op:operator><name>size</name> <op:operator>!=</op:operator> <name>me_req_size</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name>
		       <lit:literal type="string">"ni_cp: Bogus length %zu in firmware \"%s\"\n"</lit:literal></expr></argument>,
		       <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name><op:operator>-&gt;</op:operator><name>size</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <op:operator>-</op:operator><name>EINVAL</name></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string">"radeon/%s_rlc.bin"</lit:literal></expr></argument>, <argument><expr><name>rlc_chip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <call><name>request_firmware</name><argument_list>(<argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>pdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
		<goto>goto <name>out</name>;</goto></then></if>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name><op:operator>-&gt;</op:operator><name>size</name> <op:operator>!=</op:operator> <name>rlc_req_size</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name>
		       <lit:literal type="string">"ni_rlc: Bogus length %zu in firmware \"%s\"\n"</lit:literal></expr></argument>,
		       <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name><op:operator>-&gt;</op:operator><name>size</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <op:operator>-</op:operator><name>EINVAL</name></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string">"radeon/%s_mc.bin"</lit:literal></expr></argument>, <argument><expr><name>chip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <call><name>request_firmware</name><argument_list>(<argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>pdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
		<goto>goto <name>out</name>;</goto></then></if>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name><op:operator>-&gt;</op:operator><name>size</name> <op:operator>!=</op:operator> <name>mc_req_size</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name>
		       <lit:literal type="string">"ni_mc: Bogus length %zu in firmware \"%s\"\n"</lit:literal></expr></argument>,
		       <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name><op:operator>-&gt;</op:operator><name>size</name></expr></argument>, <argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>err</name> <op:operator>=</op:operator> <op:operator>-</op:operator><name>EINVAL</name></expr>;</expr_stmt>
	}</block></then></if>
<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>platform_device_unregister</name><argument_list>(<argument><expr><name>pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>err</name> <op:operator>!=</op:operator> <op:operator>-</op:operator><name>EINVAL</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_ERR</name>
			       <lit:literal type="string">"ni_cp: Failed to load firmware \"%s\"\n"</lit:literal></expr></argument>,
			       <argument><expr><name>fw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>release_firmware</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name> <op:operator>=</op:operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>release_firmware</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name> <op:operator>=</op:operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>release_firmware</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name> <op:operator>=</op:operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>release_firmware</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name> <op:operator>=</op:operator> <name>NULL</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Core functions
 */</comment>
<function><type><name>static</name> <name>u32</name></type> <name>cayman_get_tile_pipe_to_backend_map</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>,
					       <param><decl><type><name>u32</name></type> <name>num_tile_pipes</name></decl></param>,
					       <param><decl><type><name>u32</name></type> <name>num_backends_per_asic</name></decl></param>,
					       <param><decl><type><name>u32</name> <type:modifier>*</type:modifier></type><name>backend_disable_mask_per_asic</name></decl></param>,
					       <param><decl><type><name>u32</name></type> <name>num_shader_engines</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>backend_map</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>enabled_backends_mask</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>enabled_backends_count</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>num_backends_per_se</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cur_pipe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name><name>swizzle_pipe</name><index>[<expr><name>CAYMAN_MAX_PIPES</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cur_backend</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>force_no_swizzle</name></decl>;</decl_stmt>

	<comment type="block">/* force legal values */</comment>
	<if>if <condition>(<expr><name>num_tile_pipes</name> <op:operator>&lt;</op:operator> <lit:literal type="number">1</lit:literal></expr>)</condition><then>
		<expr_stmt><expr><name>num_tile_pipes</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>num_tile_pipes</name> <op:operator>&gt;</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_tile_pipes</name></expr>)</condition><then>
		<expr_stmt><expr><name>num_tile_pipes</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_tile_pipes</name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>num_shader_engines</name> <op:operator>&lt;</op:operator> <lit:literal type="number">1</lit:literal></expr>)</condition><then>
		<expr_stmt><expr><name>num_shader_engines</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>num_shader_engines</name> <op:operator>&gt;</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_shader_engines</name></expr>)</condition><then>
		<expr_stmt><expr><name>num_shader_engines</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_shader_engines</name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>num_backends_per_asic</name> <op:operator>&lt;</op:operator> <name>num_shader_engines</name></expr>)</condition><then>
		<expr_stmt><expr><name>num_backends_per_asic</name> <op:operator>=</op:operator> <name>num_shader_engines</name></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr><name>num_backends_per_asic</name> <op:operator>&gt;</op:operator> <op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name> <op:operator>*</op:operator> <name>num_shader_engines</name><op:operator>)</op:operator></expr>)</condition><then>
		<expr_stmt><expr><name>num_backends_per_asic</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name> <op:operator>*</op:operator> <name>num_shader_engines</name></expr>;</expr_stmt></then></if>

	<comment type="block">/* make sure we have the same number of backends per se */</comment>
	<expr_stmt><expr><name>num_backends_per_asic</name> <op:operator>=</op:operator> <call><name>ALIGN</name><argument_list>(<argument><expr><name>num_backends_per_asic</name></expr></argument>, <argument><expr><name>num_shader_engines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* set up the number of backends per se */</comment>
	<expr_stmt><expr><name>num_backends_per_se</name> <op:operator>=</op:operator> <name>num_backends_per_asic</name> <op:operator>/</op:operator> <name>num_shader_engines</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>num_backends_per_se</name> <op:operator>&gt;</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>num_backends_per_se</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_backends_per_asic</name> <op:operator>=</op:operator> <name>num_backends_per_se</name> <op:operator>*</op:operator> <name>num_shader_engines</name></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="block">/* create enable mask and count for enabled backends */</comment>
	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>CAYMAN_MAX_BACKENDS</name></expr>;</condition> <incr><expr><op:operator>++</op:operator><name>i</name></expr></incr><op:operator>)</op:operator></group> <block>{
		<if>if <condition>(<expr><op:operator>(</op:operator><op:operator>(</op:operator><op:operator>*</op:operator><name>backend_disable_mask_per_asic</name> <op:operator>&gt;&gt;</op:operator> <name>i</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>==</op:operator> <lit:literal type="number">0</lit:literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>enabled_backends_mask</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>i</name><op:operator>)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator>++</op:operator><name>enabled_backends_count</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>enabled_backends_count</name> <op:operator>==</op:operator> <name>num_backends_per_asic</name></expr>)</condition><then>
			<break>break;</break></then></if>
	}</block></for>

	<comment type="block">/* force the backends mask to match the current number of backends */</comment>
	<if>if <condition>(<expr><name>enabled_backends_count</name> <op:operator>!=</op:operator> <name>num_backends_per_asic</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>u32</name></type> <name>this_backend_enabled</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u32</name></type> <name>shader_engine</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u32</name></type> <name>backend_per_se</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>enabled_backends_mask</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>enabled_backends_count</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator>*</op:operator><name>backend_disable_mask_per_asic</name> <op:operator>=</op:operator> <name>CAYMAN_MAX_BACKENDS_MASK</name></expr>;</expr_stmt>
		<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>CAYMAN_MAX_BACKENDS</name></expr>;</condition> <incr><expr><op:operator>++</op:operator><name>i</name></expr></incr><op:operator>)</op:operator></group> <block>{
			<comment type="block">/* calc the current se */</comment>
			<expr_stmt><expr><name>shader_engine</name> <op:operator>=</op:operator> <name>i</name> <op:operator>/</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name></expr>;</expr_stmt>
			<comment type="block">/* calc the backend per se */</comment>
			<expr_stmt><expr><name>backend_per_se</name> <op:operator>=</op:operator> <name>i</name> <op:operator>%</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name></expr>;</expr_stmt>
			<comment type="block">/* default to not enabled */</comment>
			<expr_stmt><expr><name>this_backend_enabled</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><op:operator>(</op:operator><name>shader_engine</name> <op:operator>&lt;</op:operator> <name>num_shader_engines</name><op:operator>)</op:operator> <op:operator>&amp;&amp;</op:operator>
			    <op:operator>(</op:operator><name>backend_per_se</name> <op:operator>&lt;</op:operator> <name>num_backends_per_se</name><op:operator>)</op:operator></expr>)</condition><then>
				<expr_stmt><expr><name>this_backend_enabled</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>this_backend_enabled</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>enabled_backends_mask</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>i</name><op:operator>)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator>*</op:operator><name>backend_disable_mask_per_asic</name> <op:operator>&amp;=</op:operator> <op:operator>~</op:operator><op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>i</name><op:operator>)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator>++</op:operator><name>enabled_backends_count</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></then></if>


	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><op:operator>(</op:operator><name>uint8_t</name> <op:operator>*</op:operator><op:operator>)</op:operator><op:operator>&amp;</op:operator><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></call> <op:operator>*</op:operator> <name>CAYMAN_MAX_PIPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>family</name></expr>)</condition> <block>{
	<case>case <expr><name>CHIP_CAYMAN</name></expr>:
		<expr_stmt><expr><name>force_no_swizzle</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
		<break>break;</break>
	</case><default>default:
		<expr_stmt><expr><name>force_no_swizzle</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt>
		<break>break;</break>
	</default>}</block></switch>
	<if>if <condition>(<expr><name>force_no_swizzle</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>last_backend_enabled</name> =<init> <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>force_no_swizzle</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt>
		<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>CAYMAN_MAX_BACKENDS</name></expr>;</condition> <incr><expr><op:operator>++</op:operator><name>i</name></expr></incr><op:operator>)</op:operator></group> <block>{
			<if>if <condition>(<expr><op:operator>(</op:operator><op:operator>(</op:operator><name>enabled_backends_mask</name> <op:operator>&gt;&gt;</op:operator> <name>i</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>==</op:operator> <lit:literal type="number">1</lit:literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>last_backend_enabled</name></expr>)</condition><then>
					<expr_stmt><expr><name>force_no_swizzle</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name>last_backend_enabled</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
			}</block></then> <else>else
				<expr_stmt><expr><name>last_backend_enabled</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt></else></if>
		}</block></for>
	}</block></then></if>

	<switch>switch <condition>(<expr><name>num_tile_pipes</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">3</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">5</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">7</lit:literal></expr>:
		<expr_stmt><expr><call><name>DRM_ERROR</name><argument_list>(<argument><expr><lit:literal type="string">"odd number of pipes!\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
		<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">4</lit:literal></expr>:
		<if>if <condition>(<expr><name>force_no_swizzle</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">6</lit:literal></expr>:
		<if>if <condition>(<expr><name>force_no_swizzle</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">4</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">5</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">5</lit:literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">4</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">5</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">5</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">8</lit:literal></expr>:
		<if>if <condition>(<expr><name>force_no_swizzle</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">4</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">5</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">5</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">6</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">6</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">7</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">7</lit:literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">0</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">1</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">2</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">3</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">6</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">4</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">5</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">3</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">6</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">5</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>swizzle_pipe</name><index>[<expr><lit:literal type="number">7</lit:literal></expr>]</index></name> <op:operator>=</op:operator> <lit:literal type="number">7</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<break>break;</break>
	</case>}</block></switch>

	<for>for <group>(<init><expr><name>cur_pipe</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>cur_pipe</name> <op:operator>&lt;</op:operator> <name>num_tile_pipes</name></expr>;</condition> <incr><expr><op:operator>++</op:operator><name>cur_pipe</name></expr></incr><op:operator>)</op:operator></group> <block>{
		<while>while <condition>(<expr><op:operator>(</op:operator><op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>cur_backend</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <name>enabled_backends_mask</name><op:operator>)</op:operator> <op:operator>==</op:operator> <lit:literal type="number">0</lit:literal></expr>)</condition>
			<expr_stmt><expr><name>cur_backend</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>cur_backend</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>%</op:operator> <name>CAYMAN_MAX_BACKENDS</name></expr>;</expr_stmt></while>

		<expr_stmt><expr><name>backend_map</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><op:operator>(</op:operator><op:operator>(</op:operator><name>cur_backend</name> <op:operator>&amp;</op:operator> <lit:literal type="number">0xf</lit:literal><op:operator>)</op:operator> <op:operator>&lt;&lt;</op:operator> <op:operator>(</op:operator><name><name>swizzle_pipe</name><index>[<expr><name>cur_pipe</name></expr>]</index></name> <op:operator>*</op:operator> <lit:literal type="number">4</lit:literal><op:operator>)</op:operator><op:operator>)</op:operator><op:operator>)</op:operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>cur_backend</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>cur_backend</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>%</op:operator> <name>CAYMAN_MAX_BACKENDS</name></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><name>backend_map</name></expr>;</return>
}</block></function>

<diff:delete><function><type><name>static</name> <name>void</name></type> <name>cayman_program_channel_remap</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>tcp_chan_steer_lo</name>, <name>tcp_chan_steer_hi</name>, <name>mc_shared_chremap</name>, <name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>MC_SHARED_CHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><op:operator>(</op:operator><name>tmp</name> <op:operator>&amp;</op:operator> <name>NOOFCHAN_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NOOFCHAN_SHIFT</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">0</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
	</case><case>case <expr><lit:literal type="number">3</lit:literal></expr>:
	</case><default>default:
		<comment type="block">/* default mapping */</comment>
		<expr_stmt><expr><name>mc_shared_chremap</name> <op:operator>=</op:operator> <lit:literal type="number">0x00fac688</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</default>}</block></switch>

	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>family</name></expr>)</condition> <block>{
	<case>case <expr><name>CHIP_CAYMAN</name></expr>:
	</case><default>default:
		<comment type="line">//tcp_chan_steer_lo = 0x54763210</comment>
		<expr_stmt><expr><name>tcp_chan_steer_lo</name> <op:operator>=</op:operator> <lit:literal type="number">0x76543210</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tcp_chan_steer_hi</name> <op:operator>=</op:operator> <lit:literal type="number">0x0000ba98</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</default>}</block></switch>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>TCP_CHAN_STEER_LO</name></expr></argument>, <argument><expr><name>tcp_chan_steer_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>TCP_CHAN_STEER_HI</name></expr></argument>, <argument><expr><name>tcp_chan_steer_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_SHARED_CHREMAP</name></expr></argument>, <argument><expr><name>mc_shared_chremap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</diff:delete><function><type><name>static</name> <name>u32</name></type> <name>cayman_get_disable_mask_per_asic</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>,
					    <param><decl><type><name>u32</name></type> <name>disable_mask_per_se</name></decl></param>,
					    <param><decl><type><name>u32</name></type> <name>max_disable_mask_per_se</name></decl></param>,
					    <param><decl><type><name>u32</name></type> <name>num_shader_engines</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>disable_field_width_per_se</name> =<init> <expr><call><name>r600_count_pipe_bits</name><argument_list>(<argument><expr><name>disable_mask_per_se</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>disable_mask_per_asic</name> =<init> <expr><name>disable_mask_per_se</name> <op:operator>&amp;</op:operator> <name>max_disable_mask_per_se</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>num_shader_engines</name> <op:operator>==</op:operator> <lit:literal type="number">1</lit:literal></expr>)</condition><then>
		<return>return <expr><name>disable_mask_per_asic</name></expr>;</return></then>
	<else>else <if>if <condition>(<expr><name>num_shader_engines</name> <op:operator>==</op:operator> <lit:literal type="number">2</lit:literal></expr>)</condition><then>
		<return>return <expr><name>disable_mask_per_asic</name> <op:operator>|</op:operator> <op:operator>(</op:operator><name>disable_mask_per_asic</name> <op:operator>&lt;&lt;</op:operator> <name>disable_field_width_per_se</name><op:operator>)</op:operator></expr>;</return></then>
	<else>else
		<return>return <expr><lit:literal type="number">0xffffffff</lit:literal></expr>;</return></else></if></else></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>cayman_gpu_init</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>cc_rb_backend_disable</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cc_gc_shader_pipe_config</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>gb_addr_config</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>mc_shared_chmap</name>, <name>mc_arb_ramcfg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>gb_backend_map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cgts_tcc_disable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>sx_debug_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>smx_dc_ctl0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>gc_user_shader_pipe_config</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>gc_user_rb_backend_disable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cgts_user_tcc_disable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>cgts_sm_ctrl_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>hdp_host_path_cntl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>family</name></expr>)</condition> <block>{
	<case>case <expr><name>CHIP_CAYMAN</name></expr>:
	</case><default>default:
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_shader_engines</name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_pipes_per_simd</name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_tile_pipes</name> <op:operator>=</op:operator> <lit:literal type="number">8</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_simds_per_se</name> <op:operator>=</op:operator> <lit:literal type="number">12</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_backends_per_se</name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_texture_channel_caches</name> <op:operator>=</op:operator> <lit:literal type="number">8</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_gprs</name> <op:operator>=</op:operator> <lit:literal type="number">256</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_threads</name> <op:operator>=</op:operator> <lit:literal type="number">256</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_gs_threads</name> <op:operator>=</op:operator> <lit:literal type="number">32</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_stack_entries</name> <op:operator>=</op:operator> <lit:literal type="number">512</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_num_of_sets</name> <op:operator>=</op:operator> <lit:literal type="number">8</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_size</name> <op:operator>=</op:operator> <lit:literal type="number">256</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_pos_size</name> <op:operator>=</op:operator> <lit:literal type="number">64</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_smx_size</name> <op:operator>=</op:operator> <lit:literal type="number">192</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_hw_contexts</name> <op:operator>=</op:operator> <lit:literal type="number">8</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sq_num_cf_insts</name> <op:operator>=</op:operator> <lit:literal type="number">2</lit:literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_prim_fifo_size</name> <op:operator>=</op:operator> <lit:literal type="number">0x100</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_hiz_tile_fifo_size</name> <op:operator>=</op:operator> <lit:literal type="number">0x30</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_earlyz_tile_fifo_size</name> <op:operator>=</op:operator> <lit:literal type="number">0x130</lit:literal></expr>;</expr_stmt>
		<break>break;</break>
	</default>}</block></switch>

	<comment type="block">/* Initialize HDP */</comment>
	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>, <expr><name>j</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <lit:literal type="number">32</lit:literal></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr>, <expr><name>j</name> <op:operator>+=</op:operator> <lit:literal type="number">0x18</lit:literal></expr></incr><op:operator>)</op:operator></group> <block>{
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><op:operator>(</op:operator><lit:literal type="number">0x2c14</lit:literal> <op:operator>+</op:operator> <name>j</name><op:operator>)</op:operator></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><op:operator>(</op:operator><lit:literal type="number">0x2c18</lit:literal> <op:operator>+</op:operator> <name>j</name><op:operator>)</op:operator></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><op:operator>(</op:operator><lit:literal type="number">0x2c1c</lit:literal> <op:operator>+</op:operator> <name>j</name><op:operator>)</op:operator></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><op:operator>(</op:operator><lit:literal type="number">0x2c20</lit:literal> <op:operator>+</op:operator> <name>j</name><op:operator>)</op:operator></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><op:operator>(</op:operator><lit:literal type="number">0x2c24</lit:literal> <op:operator>+</op:operator> <name>j</name><op:operator>)</op:operator></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GRBM_CNTL</name></expr></argument>, <argument><expr><call><name>GRBM_READ_TIMEOUT</name><argument_list>(<argument><expr><lit:literal type="number">0xff</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<diff:insert>	<expr_stmt><expr><call><name>evergreen_fix_pci_max_read_req_size</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</diff:insert>	<expr_stmt><expr><name>mc_shared_chmap</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>MC_SHARED_CHMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mc_arb_ramcfg</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>MC_ARB_RAMCFG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cc_rb_backend_disable</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CC_RB_BACKEND_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cc_gc_shader_pipe_config</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CC_GC_SHADER_PIPE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cgts_tcc_disable</name> <op:operator>=</op:operator> <lit:literal type="number">0xff000000</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gc_user_rb_backend_disable</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>GC_USER_RB_BACKEND_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>gc_user_shader_pipe_config</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>GC_USER_SHADER_PIPE_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cgts_user_tcc_disable</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CGTS_USER_TCC_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_shader_engines</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><op:operator>(</op:operator><op:operator>~</op:operator><name>gc_user_shader_pipe_config</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <name>INACTIVE_QD_PIPES_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>INACTIVE_QD_PIPES_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_pipes_per_simd</name> <op:operator>=</op:operator> <call><name>r600_count_pipe_bits</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name> <op:operator>=</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_tile_pipes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><op:operator>(</op:operator><op:operator>~</op:operator><name>gc_user_shader_pipe_config</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <name>INACTIVE_SIMDS_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>INACTIVE_SIMDS_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_simds_per_se</name> <op:operator>=</op:operator> <call><name>r600_count_pipe_bits</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><op:operator>(</op:operator><op:operator>~</op:operator><name>gc_user_rb_backend_disable</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <name>BACKEND_DISABLE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>BACKEND_DISABLE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_backends_per_se</name> <op:operator>=</op:operator> <call><name>r600_count_pipe_bits</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gc_user_rb_backend_disable</name> <op:operator>&amp;</op:operator> <name>BACKEND_DISABLE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>BACKEND_DISABLE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>backend_disable_mask_per_asic</name> <op:operator>=</op:operator>
		<call><name>cayman_get_disable_mask_per_asic</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>CAYMAN_MAX_BACKENDS_PER_SE_MASK</name></expr></argument>,
						 <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>backend_map</name> <op:operator>=</op:operator>
		<call><name>cayman_get_tile_pipe_to_backend_map</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name></expr></argument>,
						    <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_backends_per_se</name> <op:operator>*</op:operator>
						    <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name></expr></argument>,
						    <argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>backend_disable_mask_per_asic</name></expr></argument>,
						    <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><op:operator>(</op:operator><op:operator>~</op:operator><name>cgts_user_tcc_disable</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <name>TCC_DISABLE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>TCC_DISABLE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_texture_channel_caches</name> <op:operator>=</op:operator> <call><name>r600_count_pipe_bits</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>mc_arb_ramcfg</name> <op:operator>&amp;</op:operator> <name>BURSTLENGTH_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>BURSTLENGTH_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_max_burst_length_bytes</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>tmp</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>*</op:operator> <lit:literal type="number">256</lit:literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_max_burst_length_bytes</name> <op:operator>&gt;</op:operator> <lit:literal type="number">512</lit:literal></expr>)</condition><then>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_max_burst_length_bytes</name> <op:operator>=</op:operator> <lit:literal type="number">512</lit:literal></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>mc_arb_ramcfg</name> <op:operator>&amp;</op:operator> <name>NOOFCOLS_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NOOFCOLS_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_row_size_in_kb</name> <op:operator>=</op:operator> <op:operator>(</op:operator><lit:literal type="number">4</lit:literal> <op:operator>*</op:operator> <op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <op:operator>(</op:operator><lit:literal type="number">8</lit:literal> <op:operator>+</op:operator> <name>tmp</name><op:operator>)</op:operator><op:operator>)</op:operator><op:operator>)</op:operator> <op:operator>/</op:operator> <lit:literal type="number">1024</lit:literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_row_size_in_kb</name> <op:operator>&gt;</op:operator> <lit:literal type="number">4</lit:literal></expr>)</condition><then>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_row_size_in_kb</name> <op:operator>=</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt></then></if>
	<comment type="block">/* XXX use MC settings? */</comment>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>shader_engine_tile_size</name> <op:operator>=</op:operator> <lit:literal type="number">32</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_gpus</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>multi_gpu_tile_size</name> <op:operator>=</op:operator> <lit:literal type="number">64</lit:literal></expr>;</expr_stmt>

	<comment type="line">//gb_addr_config = 0x02011003</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><lit:literal type="number">0</lit:literal></expr></cpp:if>
	gb_addr_config = RREG32(GB_ADDR_CONFIG);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>gb_addr_config</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><default>default:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_PIPES</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_PIPES</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">4</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_PIPES</name><argument_list>(<argument><expr><lit:literal type="number">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">8</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_PIPES</name><argument_list>(<argument><expr><lit:literal type="number">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>

	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_max_burst_length_bytes</name> <op:operator>/</op:operator> <lit:literal type="number">256</lit:literal><op:operator>)</op:operator> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>PIPE_INTERLEAVE_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_SHADER_ENGINES</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>shader_engine_tile_size</name> <op:operator>/</op:operator> <lit:literal type="number">16</lit:literal><op:operator>)</op:operator> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>SHADER_ENGINE_TILE_SIZE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_gpus</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><default>default:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_GPUS</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_GPUS</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">4</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>NUM_GPUS</name><argument_list>(<argument><expr><lit:literal type="number">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>multi_gpu_tile_size</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">16</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>MULTI_GPU_TILE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">32</lit:literal></expr>:
	</case><default>default:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>MULTI_GPU_TILE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><lit:literal type="number">64</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>MULTI_GPU_TILE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">128</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>MULTI_GPU_TILE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_row_size_in_kb</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><default>default:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>ROW_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>ROW_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">4</lit:literal></expr>:
		<expr_stmt><expr><name>gb_addr_config</name> <op:operator>|=</op:operator> <call><name>ROW_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>NUM_PIPES_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NUM_PIPES_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name> <op:operator>=</op:operator> <op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>tmp</name><op:operator>)</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>PIPE_INTERLEAVE_SIZE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>PIPE_INTERLEAVE_SIZE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_max_burst_length_bytes</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>tmp</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal><op:operator>)</op:operator> <op:operator>*</op:operator> <lit:literal type="number">256</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>NUM_SHADER_ENGINES_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NUM_SHADER_ENGINES_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name> <op:operator>=</op:operator> <name>tmp</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>NUM_GPUS_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NUM_GPUS_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_gpus</name> <op:operator>=</op:operator> <name>tmp</name> <op:operator>+</op:operator> <lit:literal type="number">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>MULTI_GPU_TILE_SIZE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>MULTI_GPU_TILE_SIZE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>multi_gpu_tile_size</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>ROW_SIZE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>ROW_SIZE_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>mem_row_size_in_kb</name> <op:operator>=</op:operator> <lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <name>tmp</name></expr>;</expr_stmt>

	<comment type="line">//gb_backend_map = 0x76541032;</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><lit:literal type="number">0</lit:literal></expr></cpp:if>
	gb_backend_map = RREG32(GB_BACKEND_MAP);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>gb_backend_map</name> <op:operator>=</op:operator>
		<call><name>cayman_get_tile_pipe_to_backend_map</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name></expr></argument>,
						    <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_backends_per_se</name> <op:operator>*</op:operator>
						    <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name></expr></argument>,
						    <argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>backend_disable_mask_per_asic</name></expr></argument>,
						    <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_shader_engines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* setup tiling info dword.  gb_addr_config is not adequate since it does
	 * not have bank info, so create a custom tiling dword.
	 * bits 3:0   num_pipes
	 * bits 7:4   num_banks
	 * bits 11:8  group_size
	 * bits 15:12 row_size
	 */</comment>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>num_tile_pipes</name></expr>)</condition> <block>{
	<case>case <expr><lit:literal type="number">1</lit:literal></expr>:
	</case><default>default:
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">0</lit:literal> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">0</lit:literal><op:operator>)</op:operator></expr>;</expr_stmt>
		<break>break;</break>
	</default><case>case <expr><lit:literal type="number">2</lit:literal></expr>:
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">0</lit:literal><op:operator>)</op:operator></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">4</lit:literal></expr>:
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">2</lit:literal> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">0</lit:literal><op:operator>)</op:operator></expr>;</expr_stmt>
		<break>break;</break>
	</case><case>case <expr><lit:literal type="number">8</lit:literal></expr>:
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator> <op:operator>(</op:operator><lit:literal type="number">3</lit:literal> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">0</lit:literal><op:operator>)</op:operator></expr>;</expr_stmt>
		<break>break;</break>
	</case>}</block></switch>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator>
		<op:operator>(</op:operator><op:operator>(</op:operator><name>mc_arb_ramcfg</name> <op:operator>&amp;</op:operator> <name>NOOFBANK_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>NOOFBANK_SHIFT</name><op:operator>)</op:operator> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">4</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator>
		<op:operator>(</op:operator><op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>PIPE_INTERLEAVE_SIZE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>PIPE_INTERLEAVE_SIZE_SHIFT</name><op:operator>)</op:operator> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">8</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>tile_config</name> <op:operator>|=</op:operator>
		<op:operator>(</op:operator><op:operator>(</op:operator><name>gb_addr_config</name> <op:operator>&amp;</op:operator> <name>ROW_SIZE_MASK</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <name>ROW_SIZE_SHIFT</name><op:operator>)</op:operator> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">12</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GB_BACKEND_MAP</name></expr></argument>, <argument><expr><name>gb_backend_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GB_ADDR_CONFIG</name></expr></argument>, <argument><expr><name>gb_addr_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>DMIF_ADDR_CONFIG</name></expr></argument>, <argument><expr><name>gb_addr_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>HDP_ADDR_CONFIG</name></expr></argument>, <argument><expr><name>gb_addr_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<diff:delete>	<expr_stmt><expr><call><name>cayman_program_channel_remap</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</diff:delete>	<comment type="block">/* primary versions */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CC_RB_BACKEND_DISABLE</name></expr></argument>, <argument><expr><name>cc_rb_backend_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CC_SYS_RB_BACKEND_DISABLE</name></expr></argument>, <argument><expr><name>cc_rb_backend_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CC_GC_SHADER_PIPE_CONFIG</name></expr></argument>, <argument><expr><name>cc_gc_shader_pipe_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_TCC_DISABLE</name></expr></argument>, <argument><expr><name>cgts_tcc_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_SYS_TCC_DISABLE</name></expr></argument>, <argument><expr><name>cgts_tcc_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* user versions */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GC_USER_RB_BACKEND_DISABLE</name></expr></argument>, <argument><expr><name>cc_rb_backend_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GC_USER_SYS_RB_BACKEND_DISABLE</name></expr></argument>, <argument><expr><name>cc_rb_backend_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GC_USER_SHADER_PIPE_CONFIG</name></expr></argument>, <argument><expr><name>cc_gc_shader_pipe_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_USER_SYS_TCC_DISABLE</name></expr></argument>, <argument><expr><name>cgts_tcc_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_USER_TCC_DISABLE</name></expr></argument>, <argument><expr><name>cgts_tcc_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reprogram the shader complex */</comment>
	<expr_stmt><expr><name>cgts_sm_ctrl_reg</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CGTS_SM_CTRL_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <lit:literal type="number">16</lit:literal></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_SM_CTRL_REG</name></expr></argument>, <argument><expr><name>OVERRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CGTS_SM_CTRL_REG</name></expr></argument>, <argument><expr><name>cgts_sm_ctrl_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set HW defaults for 3D engine */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_MEQ_THRESHOLDS</name></expr></argument>, <argument><expr><call><name>MEQ1_START</name><argument_list>(<argument><expr><lit:literal type="number">0x30</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator> <call><name>MEQ2_START</name><argument_list>(<argument><expr><lit:literal type="number">0x60</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sx_debug_1</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>SX_DEBUG_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sx_debug_1</name> <op:operator>|=</op:operator> <name>ENABLE_NEW_SMX_ADDRESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SX_DEBUG_1</name></expr></argument>, <argument><expr><name>sx_debug_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>smx_dc_ctl0</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>SMX_DC_CTL0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>smx_dc_ctl0</name> <op:operator>&amp;=</op:operator> <call><name>~<name>NUMBER_OF_SETS</name></name><argument_list>(<argument><expr><lit:literal type="number">0x1ff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>smx_dc_ctl0</name> <op:operator>|=</op:operator> <call><name>NUMBER_OF_SETS</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_num_of_sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SMX_DC_CTL0</name></expr></argument>, <argument><expr><name>smx_dc_ctl0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SPI_CONFIG_CNTL_1</name></expr></argument>, <argument><expr><call><name>VTX_DONE_DELAY</name><argument_list>(<argument><expr><lit:literal type="number">4</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator> <name>CRC_SIMD_ID_WADDR_DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* need to be explicitly zero-ed */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VGT_OFFCHIP_LDS_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_LSTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_HSTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_ESTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_GSTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_VSTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_PSTMP_RING_BASE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>TA_CNTL_AUX</name></expr></argument>, <argument><expr><name>DISABLE_CUBE_ANISO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SX_EXPORT_BUFFER_SIZES</name></expr></argument>, <argument><expr><op:operator>(</op:operator><call><name>COLOR_BUFFER_SIZE</name><argument_list>(<argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_size</name> <op:operator>/</op:operator> <lit:literal type="number">4</lit:literal><op:operator>)</op:operator> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
					<call><name>POSITION_BUFFER_SIZE</name><argument_list>(<argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_pos_size</name> <op:operator>/</op:operator> <lit:literal type="number">4</lit:literal><op:operator>)</op:operator> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
					<call><name>SMX_BUFFER_SIZE</name><argument_list>(<argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sx_max_export_smx_size</name> <op:operator>/</op:operator> <lit:literal type="number">4</lit:literal><op:operator>)</op:operator> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>PA_SC_FIFO_SIZE</name></expr></argument>, <argument><expr><op:operator>(</op:operator><call><name>SC_PRIM_FIFO_SIZE</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_prim_fifo_size</name></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				 <call><name>SC_HIZ_TILE_FIFO_SIZE</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_hiz_tile_fifo_size</name></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				 <call><name>SC_EARLYZ_TILE_FIFO_SIZE</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sc_earlyz_tile_fifo_size</name></expr></argument>)</argument_list></call><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VGT_NUM_INSTANCES</name></expr></argument>, <argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_PERFMON_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_MS_FIFO_SIZES</name></expr></argument>, <argument><expr><op:operator>(</op:operator><call><name>CACHE_FIFO_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">16</lit:literal> <op:operator>*</op:operator> <name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>sq_num_cf_insts</name></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				  <call><name>FETCH_FIFO_HIWATER</name><argument_list>(<argument><expr><lit:literal type="number">0x4</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				  <call><name>DONE_FIFO_HIWATER</name><argument_list>(<argument><expr><lit:literal type="number">0xe0</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				  <call><name>ALU_UPDATE_FIFO_HIWATER</name><argument_list>(<argument><expr><lit:literal type="number">0x8</lit:literal></expr></argument>)</argument_list></call><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_GPR_RESOURCE_MGMT_1</name></expr></argument>, <argument><expr><call><name>NUM_CLAUSE_TEMP_GPRS</name><argument_list>(<argument><expr><lit:literal type="number">4</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_CONFIG</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>VC_ENABLE</name> <op:operator>|</op:operator>
			   <name>EXPORT_SRC_C</name> <op:operator>|</op:operator>
			   <call><name>GFX_PRIO</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
			   <call><name>CS1_PRIO</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
			   <call><name>CS2_PRIO</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SQ_DYN_GPR_CNTL_PS_FLUSH_REQ</name></expr></argument>, <argument><expr><name>DYN_GPR_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>PA_SC_FORCE_EOV_MAX_CNTS</name></expr></argument>, <argument><expr><op:operator>(</op:operator><call><name>FORCE_EOV_MAX_CLK_CNT</name><argument_list>(<argument><expr><lit:literal type="number">4095</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
					  <call><name>FORCE_EOV_MAX_REZ_CNT</name><argument_list>(<argument><expr><lit:literal type="number">255</lit:literal></expr></argument>)</argument_list></call><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VGT_CACHE_INVALIDATION</name></expr></argument>, <argument><expr><call><name>CACHE_INVALIDATION</name><argument_list>(<argument><expr><name>VC_AND_TC</name></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
	       <call><name>AUTO_INVLD_EN</name><argument_list>(<argument><expr><name>ES_AND_GS_AUTO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VGT_GS_VERTEX_REUSE</name></expr></argument>, <argument><expr><lit:literal type="number">16</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>PA_SC_LINE_STIPPLE_STATE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR0_SEL_0</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR0_SEL_1</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR1_SEL_0</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR1_SEL_1</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR2_SEL_0</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR2_SEL_1</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR3_SEL_0</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CB_PERF_CTR3_SEL_1</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>HDP_MISC_CNTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>|=</op:operator> <name>HDP_FLUSH_INVALIDATE_CACHE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>HDP_MISC_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hdp_host_path_cntl</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>HDP_HOST_PATH_CNTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>HDP_HOST_PATH_CNTL</name></expr></argument>, <argument><expr><name>hdp_host_path_cntl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>PA_CL_ENHANCE</name></expr></argument>, <argument><expr><name>CLIP_VTX_REORDER_ENA</name> <op:operator>|</op:operator> <call><name>NUM_CLIP_SEQ</name><argument_list>(<argument><expr><lit:literal type="number">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>udelay</name><argument_list>(<argument><expr><lit:literal type="number">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * GART
 */</comment>
<function><type><name>void</name></type> <name>cayman_pcie_gart_tlb_flush</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<comment type="block">/* flush hdp cache */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>HDP_MEM_COHERENCY_FLUSH_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0x1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* bits 0-7 are the VM contexts0-7 */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_INVALIDATE_REQUEST</name></expr></argument>, <argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>cayman_pcie_gart_enable</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name> <op:operator>==</op:operator> <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>dev_err</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"No VRAM object for PCIE GART.\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><op:operator>-</op:operator><name>EINVAL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_gart_table_vram_pin</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then>
		<return>return <expr><name>r</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>radeon_gart_restore</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Setup TLB control */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_VM_MX_L1_TLB_CNTL</name></expr></argument>, <argument><expr><name>ENABLE_L1_TLB</name> <op:operator>|</op:operator>
	       <name>ENABLE_L1_FRAGMENT_PROCESSING</name> <op:operator>|</op:operator>
	       <name>SYSTEM_ACCESS_MODE_NOT_IN_SYS</name> <op:operator>|</op:operator>
	       <name>SYSTEM_APERTURE_UNMAPPED_ACCESS_PASS_THRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Setup L2 cache */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL</name></expr></argument>, <argument><expr><name>ENABLE_L2_CACHE</name> <op:operator>|</op:operator>
	       <name>ENABLE_L2_PTE_CACHE_LRU_UPDATE_BY_WRITE</name> <op:operator>|</op:operator>
	       <name>ENABLE_L2_PDE0_CACHE_LRU_UPDATE_BY_WRITE</name> <op:operator>|</op:operator>
	       <call><name>EFFECTIVE_L2_QUEUE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">7</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
	       <call><name>CONTEXT1_IDENTITY_ACCESS_MODE</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL2</name></expr></argument>, <argument><expr><name>INVALIDATE_ALL_L1_TLBS</name> <op:operator>|</op:operator> <name>INVALIDATE_L2_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL3</name></expr></argument>, <argument><expr><name>L2_CACHE_BIGK_ASSOCIATIVITY</name> <op:operator>|</op:operator>
	       <call><name>L2_CACHE_BIGK_FRAGMENT_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">6</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* setup context0 */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_PAGE_TABLE_START_ADDR</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc</name><op:operator>.</op:operator><name>gtt_start</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_PAGE_TABLE_END_ADDR</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc</name><op:operator>.</op:operator><name>gtt_end</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_PAGE_TABLE_BASE_ADDR</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table_addr</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">12</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_PROTECTION_FAULT_DEFAULT_ADDR</name></expr></argument>,
			<argument><expr><call>(<name>u32</name>)<argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dummy_page</name><op:operator>.</op:operator><name>addr</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">12</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_CNTL2</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_CNTL</name></expr></argument>, <argument><expr><name>ENABLE_CONTEXT</name> <op:operator>|</op:operator> <call><name>PAGE_TABLE_DEPTH</name><argument_list>(<argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
				<name>RANGE_PROTECTION_FAULT_ENABLE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* disable context1-7 */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT1_CNTL2</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT1_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cayman_pcie_gart_tlb_flush</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>cayman_pcie_gart_disable</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="block">/* Disable all tables */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT0_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_CONTEXT1_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Setup TLB control */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>MC_VM_MX_L1_TLB_CNTL</name></expr></argument>, <argument><expr><name>ENABLE_L1_FRAGMENT_PROCESSING</name> <op:operator>|</op:operator>
	       <name>SYSTEM_ACCESS_MODE_NOT_IN_SYS</name> <op:operator>|</op:operator>
	       <name>SYSTEM_APERTURE_UNMAPPED_ACCESS_PASS_THRU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Setup L2 cache */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL</name></expr></argument>, <argument><expr><name>ENABLE_L2_PTE_CACHE_LRU_UPDATE_BY_WRITE</name> <op:operator>|</op:operator>
	       <name>ENABLE_L2_PDE0_CACHE_LRU_UPDATE_BY_WRITE</name> <op:operator>|</op:operator>
	       <call><name>EFFECTIVE_L2_QUEUE_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">7</lit:literal></expr></argument>)</argument_list></call> <op:operator>|</op:operator>
	       <call><name>CONTEXT1_IDENTITY_ACCESS_MODE</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL2</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>VM_L2_CNTL3</name></expr></argument>, <argument><expr><name>L2_CACHE_BIGK_ASSOCIATIVITY</name> <op:operator>|</op:operator>
	       <call><name>L2_CACHE_BIGK_FRAGMENT_SIZE</name><argument_list>(<argument><expr><lit:literal type="number">6</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_bo_reserve</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>r</name> <op:operator>==</op:operator> <lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>radeon_bo_kunmap</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>radeon_bo_unpin</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>radeon_bo_unreserve</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>gart</name><op:operator>.</op:operator><name>table</name><op:operator>.</op:operator><name>vram</name><op:operator>.</op:operator><name>robj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>cayman_pcie_gart_fini</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>cayman_pcie_gart_disable</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_gart_table_vram_free</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_gart_fini</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * CP.
 */</comment>
<function><type><name>static</name> <name>void</name></type> <name>cayman_cp_enable</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>, <param><decl><type><name>bool</name></type> <name>enable</name></decl></param>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>enable</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else <block>{
		<expr_stmt><expr><call><name>radeon_ttm_set_active_vram_size</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>mc</name><op:operator>.</op:operator><name>visible_vram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_CNTL</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>CP_ME_HALT</name> <op:operator>|</op:operator> <name>CP_PFP_HALT</name><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SCRATCH_UMSK</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>cayman_cp_load_microcode</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>const</name> <name>__be32</name> <type:modifier>*</type:modifier></type><name>fw_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name> <op:operator>||</op:operator> <op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name></expr>)</condition><then>
		<return>return <expr><op:operator>-</op:operator><name>EINVAL</name></expr>;</return></then></if>

	<expr_stmt><expr><call><name>cayman_cp_enable</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fw_data</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>const</name> <name>__be32</name> <op:operator>*</op:operator><op:operator>)</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name><op:operator>-&gt;</op:operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_PFP_UCODE_ADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>CAYMAN_PFP_UCODE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_PFP_UCODE_DATA</name></expr></argument>, <argument><expr><call><name>be32_to_cpup</name><argument_list>(<argument><expr><name>fw_data</name><op:operator>++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_PFP_UCODE_ADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fw_data</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>const</name> <name>__be32</name> <op:operator>*</op:operator><op:operator>)</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name><op:operator>-&gt;</op:operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_RAM_WADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>CAYMAN_PM4_UCODE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_RAM_DATA</name></expr></argument>, <argument><expr><call><name>be32_to_cpup</name><argument_list>(<argument><expr><name>fw_data</name><op:operator>++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_PFP_UCODE_ADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_RAM_WADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_RAM_RADDR</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>cayman_cp_start</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name>, <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_ring_lock</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">7</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>DRM_ERROR</name><argument_list>(<argument><expr><lit:literal type="string">"radeon: cp failed to lock ring (%d).\n"</lit:literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><call><name>PACKET3</name><argument_list>(<argument><expr><name>PACKET3_ME_INITIALIZE</name></expr></argument>, <argument><expr><lit:literal type="number">5</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>max_hw_contexts</name> <op:operator>-</op:operator> <lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><call><name>PACKET3_ME_INITIALIZE_DEVICE_ID</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_unlock_commit</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cayman_cp_enable</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_ring_lock</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>cayman_default_size</name> <op:operator>+</op:operator> <lit:literal type="number">19</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>DRM_ERROR</name><argument_list>(<argument><expr><lit:literal type="string">"radeon: cp failed to lock ring (%d).\n"</lit:literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></then></if>

	<comment type="block">/* setup clear context state */</comment>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><call><name>PACKET3</name><argument_list>(<argument><expr><name>PACKET3_PREAMBLE_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>PACKET3_PREAMBLE_BEGIN_CLEAR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <group>(<init><expr><name>i</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</init> <condition><expr><name>i</name> <op:operator>&lt;</op:operator> <name>cayman_default_size</name></expr>;</condition> <incr><expr><name>i</name><op:operator>++</op:operator></expr></incr><op:operator>)</op:operator></group>
		<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name><name>cayman_default_state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><call><name>PACKET3</name><argument_list>(<argument><expr><name>PACKET3_PREAMBLE_CNTL</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>PACKET3_PREAMBLE_END_CLEAR_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set clear context state */</comment>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><call><name>PACKET3</name><argument_list>(<argument><expr><name>PACKET3_CLEAR_STATE</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* SQ_VTX_BASE_VTX_LOC */</comment>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xc0026f00</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Clear consts */</comment>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xc0036f00</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000bc4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xffffffff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xffffffff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xffffffff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0xc0026900</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000316</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x0000000e</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* VGT_VERTEX_REUSE_BLOCK_CNTL */</comment>
	<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x00000010</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*  */</comment>

	<expr_stmt><expr><call><name>radeon_ring_unlock_commit</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XXX init other rings */</comment>

	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>cayman_cp_fini</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>cayman_cp_enable</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>radeon_ring_fini</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>cayman_cp_resume</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>rb_bufsz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="block">/* Reset cp; if cp is reset, then PA, SH, VGT also need to be reset */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>SOFT_RESET_CP</name> <op:operator>|</op:operator>
				 <name>SOFT_RESET_PA</name> <op:operator>|</op:operator>
				 <name>SOFT_RESET_SH</name> <op:operator>|</op:operator>
				 <name>SOFT_RESET_VGT</name> <op:operator>|</op:operator>
<diff:insert>				 <name>SOFT_RESET_SPI</name> <op:operator>|</op:operator>
</diff:insert>				 <name>SOFT_RESET_SX</name><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mdelay</name><argument_list>(<argument><expr><lit:literal type="number">15</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_SEM_WAIT_TIMER</name></expr></argument>, <argument><expr><lit:literal type="number">0x4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set the write pointer delay */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB_WPTR_DELAY</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_DEBUG</name></expr></argument>, <argument><expr><op:operator>(</op:operator><lit:literal type="number">1</lit:literal> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">27</lit:literal><op:operator>)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ring 0 - compute and gfx */</comment>
	<comment type="block">/* Set ring buffer size */</comment>
	<expr_stmt><expr><name>rb_bufsz</name> <op:operator>=</op:operator> <call><name>drm_order</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>ring_size</name> <op:operator>/</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><call><name>drm_order</name><argument_list>(<argument><expr><name>RADEON_GPU_PAGE_SIZE</name><op:operator>/</op:operator><lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">8</lit:literal><op:operator>)</op:operator> <op:operator>|</op:operator> <name>rb_bufsz</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__BIG_ENDIAN</name></cpp:ifdef>
	<expr_stmt><expr><name>tmp</name> <op:operator>|=</op:operator> <name>BUF_SWAP_32BIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the ring buffer's read and write pointers */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_CNTL</name></expr></argument>, <argument><expr><name>tmp</name> <op:operator>|</op:operator> <name>RB_RPTR_WR_ENA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:insert>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt></diff:insert><diff:insert type="whitespace">
</diff:insert>	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_WPTR</name></expr></argument>, <argument><expr><diff:delete type="change"><lit:literal type="number">0</lit:literal></diff:delete><diff:insert type="change"><name>rdev</name></diff:insert><diff:insert><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>wptr</name></diff:insert></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the wb address wether it's enabled or not */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_RPTR_ADDR</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP_RPTR_OFFSET</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFFFFFFFC</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_RPTR_ADDR_HI</name></expr></argument>, <argument><expr><call><name>upper_32_bits</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP_RPTR_OFFSET</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SCRATCH_ADDR</name></expr></argument>, <argument><expr><op:operator>(</op:operator><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_SCRATCH_OFFSET</name><op:operator>)</op:operator> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">8</lit:literal><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFFFFFFFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>enabled</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SCRATCH_UMSK</name></expr></argument>, <argument><expr><lit:literal type="number">0xff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else <block>{
		<expr_stmt><expr><name>tmp</name> <op:operator>|=</op:operator> <name>RB_NO_UPDATE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>SCRATCH_UMSK</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><call><name>mdelay</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB0_BASE</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>rptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB0_RPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB0_WPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</diff:delete>
	<comment type="block">/* ring1  - compute only */</comment>
	<comment type="block">/* Set ring buffer size */</comment>
	<expr_stmt><expr><name>rb_bufsz</name> <op:operator>=</op:operator> <call><name>drm_order</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>ring_size</name> <op:operator>/</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><call><name>drm_order</name><argument_list>(<argument><expr><name>RADEON_GPU_PAGE_SIZE</name><op:operator>/</op:operator><lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">8</lit:literal><op:operator>)</op:operator> <op:operator>|</op:operator> <name>rb_bufsz</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__BIG_ENDIAN</name></cpp:ifdef>
	<expr_stmt><expr><name>tmp</name> <op:operator>|=</op:operator> <name>BUF_SWAP_32BIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the ring buffer's read and write pointers */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_CNTL</name></expr></argument>, <argument><expr><name>tmp</name> <op:operator>|</op:operator> <name>RB_RPTR_WR_ENA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:insert>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt></diff:insert><diff:insert type="whitespace">
</diff:insert>	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_WPTR</name></expr></argument>, <argument><expr><diff:delete type="change"><lit:literal type="number">0</lit:literal></diff:delete><diff:insert type="change"><name>rdev</name></diff:insert><diff:insert><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>wptr</name></diff:insert></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the wb address wether it's enabled or not */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_RPTR_ADDR</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP1_RPTR_OFFSET</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFFFFFFFC</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_RPTR_ADDR_HI</name></expr></argument>, <argument><expr><call><name>upper_32_bits</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP1_RPTR_OFFSET</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdelay</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB1_BASE</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>rptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB1_RPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB1_WPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</diff:delete>
	<comment type="block">/* ring2 - compute only */</comment>
	<comment type="block">/* Set ring buffer size */</comment>
	<expr_stmt><expr><name>rb_bufsz</name> <op:operator>=</op:operator> <call><name>drm_order</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>ring_size</name> <op:operator>/</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <op:operator>=</op:operator> <op:operator>(</op:operator><call><name>drm_order</name><argument_list>(<argument><expr><name>RADEON_GPU_PAGE_SIZE</name><op:operator>/</op:operator><lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call> <op:operator>&lt;&lt;</op:operator> <lit:literal type="number">8</lit:literal><op:operator>)</op:operator> <op:operator>|</op:operator> <name>rb_bufsz</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__BIG_ENDIAN</name></cpp:ifdef>
	<expr_stmt><expr><name>tmp</name> <op:operator>|=</op:operator> <name>BUF_SWAP_32BIT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the ring buffer's read and write pointers */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_CNTL</name></expr></argument>, <argument><expr><name>tmp</name> <op:operator>|</op:operator> <name>RB_RPTR_WR_ENA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:insert>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <lit:literal type="number">0</lit:literal></expr>;</expr_stmt></diff:insert><diff:insert type="whitespace">
</diff:insert>	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_WPTR</name></expr></argument>, <argument><expr><diff:delete type="change"><lit:literal type="number">0</lit:literal></diff:delete><diff:insert type="change"><name>rdev</name></diff:insert><diff:insert><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>wptr</name></diff:insert></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the wb address wether it's enabled or not */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_RPTR_ADDR</name></expr></argument>, <argument><expr><op:operator>(</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP2_RPTR_OFFSET</name><op:operator>)</op:operator> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFFFFFFFC</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_RPTR_ADDR_HI</name></expr></argument>, <argument><expr><call><name>upper_32_bits</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>wb</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>+</op:operator> <name>RADEON_WB_CP2_RPTR_OFFSET</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <lit:literal type="number">0xFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>mdelay</name><argument_list>(<argument><expr><lit:literal type="number">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_CNTL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_RB2_BASE</name></expr></argument>, <argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>gpu_addr</name> <op:operator>&gt;&gt;</op:operator> <lit:literal type="number">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>rptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB2_RPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<diff:delete>	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>wptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB2_WPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</diff:delete>
	<comment type="block">/* start the rings */</comment>
	<expr_stmt><expr><call><name>cayman_cp_start</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>true</name></expr>;</expr_stmt>
	<comment type="block">/* this only test cp0 */</comment>
	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_ring_test</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp1</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp2</name><op:operator>.</op:operator><name>ready</name> <op:operator>=</op:operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></then></if>

	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cayman_gpu_is_lockup</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>u32</name></type> <name>srbm_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>grbm_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>grbm_status_se0</name>, <name>grbm_status_se1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type>struct <name>r100_gpu_lockup</name> <type:modifier>*</type:modifier></type><name>lockup</name> =<init> <expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>config</name><op:operator>.</op:operator><name>cayman</name><op:operator>.</op:operator><name>lockup</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>srbm_status</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>SRBM_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>grbm_status</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>grbm_status_se0</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>grbm_status_se1</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><op:operator>!</op:operator><op:operator>(</op:operator><name>grbm_status</name> <op:operator>&amp;</op:operator> <name>GUI_ACTIVE</name><op:operator>)</op:operator></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>r100_gpu_lockup_update</name><argument_list>(<argument><expr><name>lockup</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	}</block></then></if>
	<comment type="block">/* force CP activities */</comment>
	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>radeon_ring_lock</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><op:operator>!</op:operator><name>r</name></expr>)</condition><then> <block>{
		<comment type="block">/* PACKET2 NOP */</comment>
		<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x80000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>radeon_ring_write</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><lit:literal type="number">0x80000000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>radeon_ring_unlock_commit</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="block">/* XXX deal with CP0,1,2 */</comment>
	<expr_stmt><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name><op:operator>.</op:operator><name>rptr</name> <op:operator>=</op:operator> <call><name>RREG32</name><argument_list>(<argument><expr><name>CP_RB0_RPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>r100_gpu_cp_is_lockup</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><name>lockup</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>cayman_gpu_soft_reset</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type>struct <name>evergreen_mc_save</name></type> <name>save</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u32</name></type> <name>grbm_reset</name> =<init> <expr><lit:literal type="number">0</lit:literal></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><op:operator>!</op:operator><op:operator>(</op:operator><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS</name></expr></argument>)</argument_list></call> <op:operator>&amp;</op:operator> <name>GUI_ACTIVE</name><op:operator>)</op:operator></expr>)</condition><then>
		<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"GPU softreset \n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS_SE0=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS_SE1=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  SRBM_STATUS=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>SRBM_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>evergreen_mc_stop</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>evergreen_mc_wait_for_idle</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>dev_warn</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"Wait for MC idle timedout !\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="block">/* Disable CP parsing/prefetching */</comment>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>CP_ME_CNTL</name></expr></argument>, <argument><expr><name>CP_ME_HALT</name> <op:operator>|</op:operator> <name>CP_PFP_HALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reset all the gfx blocks */</comment>
	<expr_stmt><expr><name>grbm_reset</name> <op:operator>=</op:operator> <op:operator>(</op:operator><name>SOFT_RESET_CP</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_CB</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_DB</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_GDS</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_PA</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_SC</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_SPI</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_SH</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_SX</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_TC</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_TA</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_VGT</name> <op:operator>|</op:operator>
		      <name>SOFT_RESET_IA</name><op:operator>)</op:operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_SOFT_RESET=0x%08X\n"</lit:literal></expr></argument>, <argument><expr><name>grbm_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>, <argument><expr><name>grbm_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator>(</op:operator><name>void</name><op:operator>)</op:operator><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>udelay</name><argument_list>(<argument><expr><lit:literal type="number">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>, <argument><expr><lit:literal type="number">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator>(</op:operator><name>void</name><op:operator>)</op:operator><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Wait a little for things to settle down */</comment>
	<expr_stmt><expr><call><name>udelay</name><argument_list>(<argument><expr><lit:literal type="number">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS_SE0=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  GRBM_STATUS_SE1=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>GRBM_STATUS_SE1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dev_info</name><argument_list>(<argument><expr><name>rdev</name><op:operator>-&gt;</op:operator><name>dev</name></expr></argument>, <argument><expr><lit:literal type="string">"  SRBM_STATUS=0x%08X\n"</lit:literal></expr></argument>,
		<argument><expr><call><name>RREG32</name><argument_list>(<argument><expr><name>SRBM_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>evergreen_mc_resume</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>, <argument><expr><op:operator>&amp;</op:operator><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><lit:literal type="number">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>cayman_asic_reset</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<return>return <expr><call><name>cayman_gpu_soft_reset</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>cayman_startup</name><parameter_list>(<param><decl><type>struct <name>radeon_device</name> <type:modifier>*</type:modifier></type><name>rdev</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>me_fw</name> <op:operator>||</op:operator> <op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>pfp_fw</name> <op:operator>||</op:operator> <op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>rlc_fw</name> <op:operator>||</op:operator> <op:operator>!</op:operator><name>rdev</name><op:operator>-&gt;</op:operator><name>mc_fw</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>ni_init_microcode</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>DRM_ERROR</name><argument_list>(<argument><expr><lit:literal type="string">"Failed to load firmware!\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>r</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>ni_mc_load_microcode</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>DRM_ERROR</name><argument_list>(<argument><expr><lit:literal type="string">"Failed to load MC firmware!\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name>evergreen_mc_program</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <op:operator>=</op:operator> <call><name>cayman_pcie_gart_enable</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>r</name></expr>)</condition><then>
		<return>return <expr><name>r</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name>cayman_gpu_init</name><argument_list>(<argument><expr><name>rdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<diff:insert>	</diff:insert></block></function></unit>
