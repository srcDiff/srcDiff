/*
 * SPDX-License-Identifier: GPL-3.0-only

 * Copyright (C) 2011-2024  SDML (www.srcDiff.org)
 * This file is part of the srcDiff translator.
 */
#define BOOST_TEST_MODULE test is_interchangeable_match

#include <iostream>
#include <srcdiff_match.hpp>
#include <boost/test/included/unit_test.hpp>
#include <boost/test/data/monomorphic.hpp>
#include <boost/test/data/test_case.hpp>
#include <string>
#include <test_utils.hpp>

namespace bu = boost::unit_test::data;




//=========================================================================
//===================== passing test set Start here =======================
//=========================================================================

const node_set_data original_sets[] = {
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),

    create_node_set("class foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),

	create_node_set("public foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),

	create_node_set("cast(foo) ;(", "C++"),



//======== opposite =======================

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i > 10) {}", "C++"),

    create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),

	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("public foo:", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),

	create_node_set("cast(foo) ;(", "C++"),


//========== end opposite ======================


	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),




	



};





const node_set_data modified_sets[] = {
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i > 10) {}", "C++"),

    create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),

	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("public foo:", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),

	create_node_set("cast(foo) ;(", "C++"),



//====== opposite ==============================

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),

    create_node_set("class foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("enum foo {}", "C++"),


	create_node_set("public foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("private foo:", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),

	create_node_set("cast(foo) ;(", "C++"),



 //========= end opposite ===================== 


    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i < 10) {}", "C++"),

	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),


//=========================================================================
// ==================== passing test set End here =========================
//=========================================================================

};









//==========================================================================
// ====================== failed test set Start here =======================
//==========================================================================

const node_set_data false_original_sets[] = {
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),

    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),

//===

    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),

   	create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),

   	create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),

    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),

//===
    

    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),

    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),

    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),

//===

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),

	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),

	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),

//===

	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),

//===

	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),



//============ opposite =========================


    create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

//===

    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

//===

  
	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),


//===

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

//===

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

//===

	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),



};



const node_set_data false_modified_sets[] = {
    create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

//===

    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

//===

  
	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),


//===

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

//===

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
 	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

//===

	create_node_set("public foo:", "C++"),
	create_node_set("protected foo:", "C++"),
	create_node_set("private foo:", "C++"),
	create_node_set("class foo {}", "C++"),
	create_node_set("struct foo {}", "C++"),
	create_node_set("union foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),

//===========opposite =============

    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
	create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),
    create_node_set("if(i < 10) {}", "C++"),

    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),
    create_node_set("else(i > 10) {}", "C++"),

//===

    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),
    create_node_set("class foo {}", "C++"),

   	create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),
    create_node_set("struct foo {}", "C++"),

   	create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),
    create_node_set("union foo {}", "C++"),

    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),
    create_node_set("enum foo {}", "C++"),

//===
    
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),
    create_node_set("public foo:", "C++"),

    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),
    create_node_set("private foo:", "C++"),

    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),
    create_node_set("protected foo:", "C++"),

//===

	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),
	create_node_set("expr_stmt("");(", "C++"),

	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),
	create_node_set("decl_stmt foo;(", "C++"),

	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),
	create_node_set("return 0;(", "C++"),

//===

	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),
	create_node_set("if(i < 10) {} else {}(", "C++"),

	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("for (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("while (int i = 0; i < count; ++i) {}(", "C++"),

	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),
	create_node_set("foreach (int i = 0; i < count; ++i) {}(", "C++"),

//===

	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),
	create_node_set("cast(foo) ;(", "C++"),

//==========================================================================
// ====================== failed test set End here =========================
//==========================================================================

};








// combining datasets
// ^ (zip) = pair together datasets by position
// bu::data::make

BOOST_DATA_TEST_CASE(passes, bu::make(original_sets) ^ bu::make(modified_sets), original, modified){

	std::cerr << original << ":" << modified << '\n';

    BOOST_TEST(srcdiff_match::is_interchangeable_match(original.set, modified.set));
}



BOOST_DATA_TEST_CASE(equals_not, bu::make(false_original_sets) ^ bu::make(false_modified_sets), false_original, false_modified){

	std::cerr << false_original << ":" << false_modified << '\n';

    BOOST_TEST(!(srcdiff_match::is_interchangeable_match(false_original.set, false_modified.set)));
}


