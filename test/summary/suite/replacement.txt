### Test 1 ###
ORIGINAL
void KisZoomManager::changeAspectMode(bool aspectMode)
{
    KisImageSP img = m_view->image();

    if (aspectMode)
        m_zoomHandler->setResolution(img->xRes(), img->yRes());
    else
        m_zoomHandler->setResolutionToStandard();

    m_view->canvasBase()->preScale();
    m_view->canvas()->update();

    QSize sz = QSize(int(0.5 + m_zoomHandler->documentToViewX(img->width() / img->xRes())),
                     int(0.5 + m_zoomHandler->documentToViewY(img->height() / img->yRes())));
    m_canvasController->setDocumentSize(sz);

    // Finally ask the canvasController to recenter
    m_canvasController->recenterPreferred();
}
END_ORIGINAL

MODIFIED
void KisZoomManager::changeAspectMode(bool aspectMode)
{
    KisImageSP img = m_view->image();

    if (aspectMode)
        m_zoomHandler->setResolution(img->xRes(), img->yRes());
    else
        m_zoomHandler->setResolutionToStandard();

    m_zoomController->setZoom(m_zoomHandler->zoomMode(), m_zoomHandler->zoom());
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KisZoomManager::changeAspectMode':
  #Impact#: #Statement# = #6#	#Non-Statement# = #0#	#Cyclomatic# = #0#
	• 5 #statements# and a #comment# were replaced with a #call#

END_SUMMARY

### Test 2 ###
ORIGINAL
void KoZoomController::setZoom(KoZoomMode::Mode mode, qreal zoom)
{
    if (d->zoomHandler->zoomMode() == mode && d->zoomHandler->zoom() == zoom)
        return; // no change
    d->zoomHandler->setZoomMode(mode);

    if(mode == KoZoomMode::ZOOM_CONSTANT)
    {
        if(zoom == 0.0) return;
        d->action->setZoom(zoom);
    }
    else if(mode == KoZoomMode::ZOOM_WIDTH)
    {
        zoom = (d->canvasController->viewport()->size().width() - 2*d->fitMargin)
                         / (d->zoomHandler->resolutionX() * d->pageSize.width());
        d->action->setSelectedZoomMode(mode);
        d->action->setEffectiveZoom(zoom);
    }
    else if(mode == KoZoomMode::ZOOM_PAGE)
    {
        zoom = (d->canvasController->viewport()->size().width() - 2*d->fitMargin)
                         / (d->zoomHandler->resolutionX() * d->pageSize.width());
        zoom = qMin(zoom, (d->canvasController->viewport()->size().height() - 2*d->fitMargin)
                     / (d->zoomHandler->resolutionY() * d->pageSize.height()));

        d->action->setSelectedZoomMode(mode);
        d->action->setEffectiveZoom(zoom);
    }

    d->zoomHandler->setZoom(zoom);

    // Tell the canvasController that the zoom has changed
    // Actually canvasController doesn't know about zoom, but the document in pixels
    // has change as a result of the zoom change
#ifdef DEBUG
    if(! d->documentSize.isValid())
        kWarning(30004) << "Setting zoom while there is no document size set, this will fail";
    else if(d->pageSize.width() > d->documentSize.width() || d->pageSize.height() > d->documentSize.height())
        kWarning(30004) << "ZoomController; Your page size is larger than your document size (" << 
            d->pageSize << " > " << d->documentSize << ")\n";
#endif
    d->canvasController->setDocumentSize( d->zoomHandler->documentToView(d->documentSize).toSize() );

    // Finally ask the canvasController to recenter
    d->canvasController->recenterPreferred();

    emit zoomChanged(mode, zoom);
}
END_ORIGINAL

MODIFIED
void KoZoomController::setZoom(KoZoomMode::Mode mode, qreal zoom)
{
    // Seems to be unused
//    if (d->zoomHandler->zoomMode() == mode && d->zoomHandler->zoom() == zoom)
//        return; // no change
    d->zoomHandler->setZoomMode(mode);

    if(mode == KoZoomMode::ZOOM_CONSTANT)
    {
        if(zoom == 0.0) return;
        d->action->setZoom(zoom);
    }
    else if(mode == KoZoomMode::ZOOM_WIDTH)
    {
        zoom = (d->canvasController->viewport()->size().width() - 2*d->fitMargin)
                         / (d->zoomHandler->resolutionX() * d->pageSize.width());
        d->action->setSelectedZoomMode(mode);
        d->action->setEffectiveZoom(zoom);
    }
    else if(mode == KoZoomMode::ZOOM_PAGE)
    {
        zoom = (d->canvasController->viewport()->size().width() - 2*d->fitMargin)
                         / (d->zoomHandler->resolutionX() * d->pageSize.width());
        zoom = qMin(zoom, (d->canvasController->viewport()->size().height() - 2*d->fitMargin)
                     / (d->zoomHandler->resolutionY() * d->pageSize.height()));

        d->action->setSelectedZoomMode(mode);
        d->action->setEffectiveZoom(zoom);
    }

    d->zoomHandler->setZoom(zoom);

    // Tell the canvasController that the zoom has changed
    // Actually canvasController doesn't know about zoom, but the document in pixels
    // has change as a result of the zoom change
#ifdef DEBUG
    if(! d->documentSize.isValid())
        kWarning(30004) << "Setting zoom while there is no document size set, this will fail";
    else if(d->pageSize.width() > d->documentSize.width() || d->pageSize.height() > d->documentSize.height())
        kWarning(30004) << "ZoomController; Your page size is larger than your document size (" << 
            d->pageSize << " > " << d->documentSize << ")\n";
#endif
    d->canvasController->setDocumentSize( d->zoomHandler->documentToView(d->documentSize).toSize() );

    // Finally ask the canvasController to recenter
    d->canvasController->recenterPreferred();

    emit zoomChanged(mode, zoom);
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KoZoomController::setZoom':
  #Impact#: #Statement# = #2#	#Non-Statement# = #0#	#Cyclomatic# = #-1#
	• a #guard clause# was commented out

END_SUMMARY

### Test 3 ###
ORIGINAL
KWTextFrameSet::~KWTextFrameSet()
{
    delete m_document;
}
END_ORIGINAL

MODIFIED
KWTextFrameSet::~KWTextFrameSet()
{
    a = b;
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• destructor 'KWTextFrameSet::~KWTextFrameSet':
  #Impact#: #Statement# = #2#	#Non-Statement# = #0#	#Cyclomatic# = #0#
	• a #delete# was replaced with an #assignment#

END_SUMMARY
