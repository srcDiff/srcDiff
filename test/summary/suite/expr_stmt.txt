### Test 1 ###
ORIGINAL
void KisView2::slotLoadingFinished()
{
	KisImageSP img = image();
	slotImageSizeChanged();

	if (m_d->statusBar) {
		m_d->statusBar->imageSizeChanged(img->width(), img->height());
	}
	m_d->resourceProvider->slotImageSizeChanged();

	m_d->nodeManager->nodesUpdated();

	connectCurrentImage();

	if (img->locked()) {
		// If this is the first view on the image, the image will have been locked
		// so unlock it.
		img->blockSignals(false);
		img->unlock();
	}

	if (KisNodeSP node = img->rootLayer()->firstChild()) {
		m_d->layerBox->setCurrentNode(node);
		m_d->nodeManager->activateNode(node);
	}

	m_d->zoomManager->zoomController()->setZoomMode(KoZoomMode::ZOOM_PAGE);

	updateGUI();
//     dbgUI <<"image finished loading, active layer:" << img->activeLayer() <<", root layer:" << img->rootLayer();

}
END_ORIGINAL

MODIFIED
void KisView2::slotLoadingFinished()
{
	KisImageSP img = image();
	slotImageSizeChanged();

	if (m_d->statusBar) {
		m_d->statusBar->imageSizeChanged(img->width(), img->height());
	}
	m_d->resourceProvider->slotImageSizeChanged();

	m_d->nodeManager->nodesUpdated();

	connectCurrentImage();

	if (img->locked()) {
		// If this is the first view on the image, the image will have been locked
		// so unlock it.
		img->blockSignals(false);
		img->unlock();
	}

	if (KisNodeSP node = img->rootLayer()->firstChild()) {
		m_d->layerBox->setCurrentNode(node);
		m_d->nodeManager->activateNode(node);
	}

	/**
	 * Dirty hack alert
	 */
	m_d->viewConverter->setZoomMode(KoZoomMode::ZOOM_PAGE);
	m_d->zoomManager->zoomController()->setAspectMode(true);

	updateGUI();
//     dbgUI <<"image finished loading, active layer:" << img->activeLayer() <<", root layer:" << img->rootLayer();

}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KisView2::slotLoadingFinished':
  #Impact# = #2# Statements	#Other# = #0#	#Cyclomatic# = #0#
	• a #call name# change occurred
	• a #chain of calls# was added

END_SUMMARY

### Test 2 ###
ORIGINAL
void TextShape::paintComponent(QPainter &painter, const KoViewConverter &converter)
{
	p.addRect(converter.documentToView(QRectF(QPointF(), size())));
}
END_ORIGINAL

MODIFIED
void TextShape::paintComponent(QPainter &painter, const KoViewConverter &converter)
{
	p.addRect(QRectF(QPointF(), size()));
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'TextShape::paintComponent':
  #Impact# = #1# Statement	#Other# = #0#	#Cyclomatic# = #0#
	• an #argument# was modified

END_SUMMARY

### Test 3 ###
ORIGINAL
void TextShape::paintComponent(QPainter &painter, const KoViewConverter &converter)
{
	p.addRect(QRectF(QPointF(), size()));
}
END_ORIGINAL

MODIFIED
void TextShape::paintComponent(QPainter &painter, const KoViewConverter &converter)
{
	p.addRect(converter.documentToView(QRectF(QPointF(), size())));
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'TextShape::paintComponent':
  #Impact# = #1# Statement	#Other# = #0#	#Cyclomatic# = #0#
	• an #argument# was modified

END_SUMMARY

### Test 4 ###
ORIGINAL
void KoDocument::openExistingFile(const KUrl& url)
{
    bool ok = openUrl(url);
    setModified(false);

    if (ok)
        deleteOpenPane();
}
END_ORIGINAL

MODIFIED
void KoDocument::openExistingFile(const KUrl& url)
{
    openUrl(url);
    setModified(false);
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KoDocument::openExistingFile':
  #Impact# = #4# Statements	#Other# = #0#	#Cyclomatic# = #-1#
	• a #declaration# was replaced with a #call#
	• an #if# was removed

END_SUMMARY

### Test 5 ###
ORIGINAL
KoFallBackColorTransformation::KoFallBackColorTransformation(KoColorConversionTransformation* _csToFallBack, KoColorConversionTransformation* _fallBackToCs, KoColorTransformation* _transfo) : d(new Private)
{
    Q_ASSERT(*_csToFallBack->srcColorSpace() == *_fallBackToCs->dstColorSpace());
    Q_ASSERT(*_fallBackToCs->srcColorSpace() == *_csToFallBack->dstColorSpace());
    d->fallBackColorSpace = _fallBackToCs->dstColorSpace();
    d->csToFallBack = _csToFallBack;
    d->fallBackToCs = _fallBackToCs;
    d->csToFallBackCache = 0;
    d->fallBackToCsCache = 0;
    d->colorTransformation = _transfo;
    d->buff = 0;
    d->buffSize = 0;
}
END_ORIGINAL

MODIFIED
KoFallBackColorTransformation::KoFallBackColorTransformation(KoColorConversionTransformation* _csToFallBack, KoColorConversionTransformation* _fallBackToCs, KoColorTransformation* _transfo) : d(new Private)
{
    Q_ASSERT(*_csToFallBack->srcColorSpace() == *_fallBackToCs->dstColorSpace());
    Q_ASSERT(*_fallBackToCs->srcColorSpace() == *_csToFallBack->dstColorSpace());
    d->fallBackColorSpace = _fallBackToCs->srcColorSpace();
    d->csToFallBack = _csToFallBack;
    d->fallBackToCs = _fallBackToCs;
    d->csToFallBackCache = 0;
    d->fallBackToCsCache = 0;
    d->colorTransformation = _transfo;
    d->buff = 0;
    d->buffSize = 0;
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• constructor 'KoFallBackColorTransformation::KoFallBackColorTransformation':
  #Impact# = #1# Statement	#Other# = #0#	#Cyclomatic# = #0#
	• a #call# was renamed

END_SUMMARY

### Test 6 ###
ORIGINAL
void KisView2::createGUI()
{

    m_d->layerBox = qobject_cast<KisLayerBox*>(createDockWidget(&layerboxFactory));

    show();

    connect(m_d->layerBox, SIGNAL(sigRequestNewNode(const QString &)),
            m_d->nodeManager, SLOT(createNode(const QString &)));

    connect(m_d->layerBox, SIGNAL(sigRequestNodeProperties(KisNodeSP)),
            m_d->nodeManager, SLOT(nodeProperties(KisNodeSP)));

    connect(m_d->layerBox, SIGNAL(sigOpacityChanged(qreal, bool)),
            m_d->nodeManager, SLOT(nodeOpacityChanged(qreal, bool)));

    connect(m_d->layerBox, SIGNAL(sigItemComposite(const KoCompositeOp*)),
            m_d->nodeManager, SLOT(nodeCompositeOpChanged(const KoCompositeOp*)));

    connect(m_d->nodeManager, SIGNAL(sigNodeActivated(KisNodeSP)),
            m_d->resourceProvider, SLOT(slotNodeActivated(KisNodeSP)));
}
END_ORIGINAL

MODIFIED
void KisView2::createGUI()
{

    createDockWidget(&layerboxFactory);

    show();

    connect(m_d->nodeManager, SIGNAL(sigNodeActivated(KisNodeSP)),
            m_d->resourceProvider, SLOT(slotNodeActivated(KisNodeSP)));
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KisView2::createGUI':
  #Impact# = #5# Statements	#Other# = #0#	#Cyclomatic# = #0#
	• a #call# was deleted
	• a #call# was deleted
	• a #call# was deleted
	• a #call# was deleted
	• a #call# was deleted

END_SUMMARY
