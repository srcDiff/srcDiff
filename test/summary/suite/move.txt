### Test 1 ###
ORIGINAL
KisRecordedFilterActionEditor::KisRecordedFilterActionEditor( QWidget* parent, KisRecordedAction* action) :
        m_action(dynamic_cast<KisRecordedFilterAction*>(action)),
        m_gridLayout(new QGridLayout(this))
{
    Q_ASSERT(m_action);
    m_configWidget = m_action->filter()->createConfigurationWidget(this, 0 ,0);
    if(m_configWidget)
    {
        m_gridLayout->addWidget(m_configWidget);
        connect(m_configWidget, SIGNAL(sigConfigChanged()), SLOT(configurationUpdated()));
        m_configWidget->setConfiguration(m_action->filterConfiguration());
    } else {
        m_gridLayout->addWidget(new QLabel("No configuration option.", this ));
    }
}
END_ORIGINAL

MODIFIED
KisRecordedFilterActionEditor::KisRecordedFilterActionEditor( QWidget* parent, KisRecordedAction* action) :
        m_action(dynamic_cast<KisRecordedFilterAction*>(action)),
        m_gridLayout(new QGridLayout(this))
{
    Q_ASSERT(m_action);
    m_configWidget = m_action->filter()->createConfigurationWidget(this, 0 ,0);
    if(m_configWidget)
    {
        m_gridLayout->addWidget(m_configWidget);
        m_configWidget->setConfiguration(m_action->filterConfiguration());
        connect(m_configWidget, SIGNAL(sigConfigChanged()), SLOT(configurationUpdated()));
    } else {
        m_gridLayout->addWidget(new QLabel("No configuration option.", this ));
    }
}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• constructor 'KisRecordedFilterActionEditor::KisRecordedFilterActionEditor':
  #Impact#: #Statement# = #3#	#Non-Statement# = #0#	#Cyclomatic# = #0#
	• a #call# was moved

END_SUMMARY

### Test 2 ###
ORIGINAL
void KoTextLoader::loadBody(const KoXmlElement &bodyElem, QTextCursor &cursor)
{

    QString cellStyleName = rowTag.attributeNS(KoXmlNS::table, "style-name", "");
    if (!cellStyleName.isEmpty()) {
        KoTableCellStyle *cellStyle = d->textSharedData->tableCellStyle(cellStyleName, d->stylesDotXml);
        QTextTableCellFormat cellFormat = cell.format().toTableCellFormat();
        cellStyle->applyStyle(cellFormat);
        cell.setFormat(cellFormat);
    }

    if (cell.isValid()) {
        cursor = cell.firstCursorPosition();
        loadBody(rowTag, cursor);
    }

}
END_ORIGINAL

MODIFIED
void KoTextLoader::loadBody(const KoXmlElement &bodyElem, QTextCursor &cursor)
{
    if (cell.isValid()) {
        QString cellStyleName = rowTag.attributeNS(KoXmlNS::table, "style-name", "");
        if (!cellStyleName.isEmpty()) {
            KoTableCellStyle *cellStyle = d->textSharedData->tableCellStyle(cellStyleName, d->stylesDotXml);
            QTextTableCellFormat cellFormat = cell.format().toTableCellFormat();
            cellStyle->applyStyle(cellFormat);
            cell.setFormat(cellFormat);
        }

        cursor = cell.firstCursorPosition();
        loadBody(rowTag, cursor);
    }

}
END_MODIFIED

SUMMARY
• file 'original.cpp|modified.cpp': Impact = High

• Modified function(s): 1
• function 'KoTextLoader::loadBody':
  #Impact#: #Statement# = #13#	#Non-Statement# = #0#	#Cyclomatic# = #0#
	• a #declaration# was moved
	• an #if# was moved

END_SUMMARY
